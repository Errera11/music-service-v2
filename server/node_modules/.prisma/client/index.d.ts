
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Song
 * 
 */
export type Song = $Result.DefaultSelection<Prisma.$SongPayload>
/**
 * Model Album
 * 
 */
export type Album = $Result.DefaultSelection<Prisma.$AlbumPayload>
/**
 * Model Favorite
 * 
 */
export type Favorite = $Result.DefaultSelection<Prisma.$FavoritePayload>
/**
 * Model Playlist
 * 
 */
export type Playlist = $Result.DefaultSelection<Prisma.$PlaylistPayload>
/**
 * Model AlbumSongs
 * 
 */
export type AlbumSongs = $Result.DefaultSelection<Prisma.$AlbumSongsPayload>
/**
 * Model PlaylistSongs
 * 
 */
export type PlaylistSongs = $Result.DefaultSelection<Prisma.$PlaylistSongsPayload>
/**
 * Model EmailAuth
 * 
 */
export type EmailAuth = $Result.DefaultSelection<Prisma.$EmailAuthPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.song`: Exposes CRUD operations for the **Song** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Songs
    * const songs = await prisma.song.findMany()
    * ```
    */
  get song(): Prisma.SongDelegate<ExtArgs>;

  /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<ExtArgs>;

  /**
   * `prisma.favorite`: Exposes CRUD operations for the **Favorite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorite.findMany()
    * ```
    */
  get favorite(): Prisma.FavoriteDelegate<ExtArgs>;

  /**
   * `prisma.playlist`: Exposes CRUD operations for the **Playlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Playlists
    * const playlists = await prisma.playlist.findMany()
    * ```
    */
  get playlist(): Prisma.PlaylistDelegate<ExtArgs>;

  /**
   * `prisma.albumSongs`: Exposes CRUD operations for the **AlbumSongs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlbumSongs
    * const albumSongs = await prisma.albumSongs.findMany()
    * ```
    */
  get albumSongs(): Prisma.AlbumSongsDelegate<ExtArgs>;

  /**
   * `prisma.playlistSongs`: Exposes CRUD operations for the **PlaylistSongs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlaylistSongs
    * const playlistSongs = await prisma.playlistSongs.findMany()
    * ```
    */
  get playlistSongs(): Prisma.PlaylistSongsDelegate<ExtArgs>;

  /**
   * `prisma.emailAuth`: Exposes CRUD operations for the **EmailAuth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailAuths
    * const emailAuths = await prisma.emailAuth.findMany()
    * ```
    */
  get emailAuth(): Prisma.EmailAuthDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.1
   * Query Engine version: 6a3747c37ff169c90047725a05a6ef02e32ac97e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Song: 'Song',
    Album: 'Album',
    Favorite: 'Favorite',
    Playlist: 'Playlist',
    AlbumSongs: 'AlbumSongs',
    PlaylistSongs: 'PlaylistSongs',
    EmailAuth: 'EmailAuth'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'song' | 'album' | 'favorite' | 'playlist' | 'albumSongs' | 'playlistSongs' | 'emailAuth'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Song: {
        payload: Prisma.$SongPayload<ExtArgs>
        fields: Prisma.SongFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SongFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SongFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          findFirst: {
            args: Prisma.SongFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SongFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          findMany: {
            args: Prisma.SongFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload>[]
          }
          create: {
            args: Prisma.SongCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          createMany: {
            args: Prisma.SongCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SongDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          update: {
            args: Prisma.SongUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          deleteMany: {
            args: Prisma.SongDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SongUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SongUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          aggregate: {
            args: Prisma.SongAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSong>
          }
          groupBy: {
            args: Prisma.SongGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SongGroupByOutputType>[]
          }
          count: {
            args: Prisma.SongCountArgs<ExtArgs>,
            result: $Utils.Optional<SongCountAggregateOutputType> | number
          }
        }
      }
      Album: {
        payload: Prisma.$AlbumPayload<ExtArgs>
        fields: Prisma.AlbumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findFirst: {
            args: Prisma.AlbumFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findMany: {
            args: Prisma.AlbumFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          create: {
            args: Prisma.AlbumCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          createMany: {
            args: Prisma.AlbumCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AlbumDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          update: {
            args: Prisma.AlbumUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          deleteMany: {
            args: Prisma.AlbumDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AlbumUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          aggregate: {
            args: Prisma.AlbumAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAlbum>
          }
          groupBy: {
            args: Prisma.AlbumGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AlbumGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumCountArgs<ExtArgs>,
            result: $Utils.Optional<AlbumCountAggregateOutputType> | number
          }
        }
      }
      Favorite: {
        payload: Prisma.$FavoritePayload<ExtArgs>
        fields: Prisma.FavoriteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findFirst: {
            args: Prisma.FavoriteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findMany: {
            args: Prisma.FavoriteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          create: {
            args: Prisma.FavoriteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          createMany: {
            args: Prisma.FavoriteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FavoriteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          update: {
            args: Prisma.FavoriteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          aggregate: {
            args: Prisma.FavoriteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavorite>
          }
          groupBy: {
            args: Prisma.FavoriteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavoriteGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteCountArgs<ExtArgs>,
            result: $Utils.Optional<FavoriteCountAggregateOutputType> | number
          }
        }
      }
      Playlist: {
        payload: Prisma.$PlaylistPayload<ExtArgs>
        fields: Prisma.PlaylistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaylistFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaylistFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          findFirst: {
            args: Prisma.PlaylistFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaylistFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          findMany: {
            args: Prisma.PlaylistFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
          }
          create: {
            args: Prisma.PlaylistCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          createMany: {
            args: Prisma.PlaylistCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlaylistDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          update: {
            args: Prisma.PlaylistUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          deleteMany: {
            args: Prisma.PlaylistDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlaylistUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlaylistUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          aggregate: {
            args: Prisma.PlaylistAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlaylist>
          }
          groupBy: {
            args: Prisma.PlaylistGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaylistCountArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistCountAggregateOutputType> | number
          }
        }
      }
      AlbumSongs: {
        payload: Prisma.$AlbumSongsPayload<ExtArgs>
        fields: Prisma.AlbumSongsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumSongsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumSongsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload>
          }
          findFirst: {
            args: Prisma.AlbumSongsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumSongsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload>
          }
          findMany: {
            args: Prisma.AlbumSongsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload>[]
          }
          create: {
            args: Prisma.AlbumSongsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload>
          }
          createMany: {
            args: Prisma.AlbumSongsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AlbumSongsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload>
          }
          update: {
            args: Prisma.AlbumSongsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload>
          }
          deleteMany: {
            args: Prisma.AlbumSongsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumSongsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AlbumSongsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumSongsPayload>
          }
          aggregate: {
            args: Prisma.AlbumSongsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAlbumSongs>
          }
          groupBy: {
            args: Prisma.AlbumSongsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AlbumSongsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumSongsCountArgs<ExtArgs>,
            result: $Utils.Optional<AlbumSongsCountAggregateOutputType> | number
          }
        }
      }
      PlaylistSongs: {
        payload: Prisma.$PlaylistSongsPayload<ExtArgs>
        fields: Prisma.PlaylistSongsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaylistSongsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaylistSongsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload>
          }
          findFirst: {
            args: Prisma.PlaylistSongsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaylistSongsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload>
          }
          findMany: {
            args: Prisma.PlaylistSongsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload>[]
          }
          create: {
            args: Prisma.PlaylistSongsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload>
          }
          createMany: {
            args: Prisma.PlaylistSongsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlaylistSongsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload>
          }
          update: {
            args: Prisma.PlaylistSongsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload>
          }
          deleteMany: {
            args: Prisma.PlaylistSongsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlaylistSongsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlaylistSongsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistSongsPayload>
          }
          aggregate: {
            args: Prisma.PlaylistSongsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlaylistSongs>
          }
          groupBy: {
            args: Prisma.PlaylistSongsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistSongsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaylistSongsCountArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistSongsCountAggregateOutputType> | number
          }
        }
      }
      EmailAuth: {
        payload: Prisma.$EmailAuthPayload<ExtArgs>
        fields: Prisma.EmailAuthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailAuthFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailAuthFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload>
          }
          findFirst: {
            args: Prisma.EmailAuthFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailAuthFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload>
          }
          findMany: {
            args: Prisma.EmailAuthFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload>[]
          }
          create: {
            args: Prisma.EmailAuthCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload>
          }
          createMany: {
            args: Prisma.EmailAuthCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmailAuthDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload>
          }
          update: {
            args: Prisma.EmailAuthUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload>
          }
          deleteMany: {
            args: Prisma.EmailAuthDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmailAuthUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmailAuthUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailAuthPayload>
          }
          aggregate: {
            args: Prisma.EmailAuthAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmailAuth>
          }
          groupBy: {
            args: Prisma.EmailAuthGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmailAuthGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailAuthCountArgs<ExtArgs>,
            result: $Utils.Optional<EmailAuthCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    fovorite: number
    playlist: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    fovorite?: boolean | UserCountOutputTypeCountFovoriteArgs
    playlist?: boolean | UserCountOutputTypeCountPlaylistArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFovoriteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlaylistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
  }



  /**
   * Count Type SongCountOutputType
   */

  export type SongCountOutputType = {
    favorite: number
    playlist_songs: number
    album_songs: number
  }

  export type SongCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    favorite?: boolean | SongCountOutputTypeCountFavoriteArgs
    playlist_songs?: boolean | SongCountOutputTypeCountPlaylist_songsArgs
    album_songs?: boolean | SongCountOutputTypeCountAlbum_songsArgs
  }

  // Custom InputTypes

  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongCountOutputType
     */
    select?: SongCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeCountFavoriteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }


  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeCountPlaylist_songsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PlaylistSongsWhereInput
  }


  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeCountAlbum_songsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AlbumSongsWhereInput
  }



  /**
   * Count Type AlbumCountOutputType
   */

  export type AlbumCountOutputType = {
    album_songs: number
  }

  export type AlbumCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    album_songs?: boolean | AlbumCountOutputTypeCountAlbum_songsArgs
  }

  // Custom InputTypes

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     */
    select?: AlbumCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountAlbum_songsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AlbumSongsWhereInput
  }



  /**
   * Count Type PlaylistCountOutputType
   */

  export type PlaylistCountOutputType = {
    playlist_songs: number
  }

  export type PlaylistCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    playlist_songs?: boolean | PlaylistCountOutputTypeCountPlaylist_songsArgs
  }

  // Custom InputTypes

  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistCountOutputType
     */
    select?: PlaylistCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeCountPlaylist_songsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PlaylistSongsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    role: string[]
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    fovorite?: boolean | User$fovoriteArgs<ExtArgs>
    playlist?: boolean | User$playlistArgs<ExtArgs>
    email_auth?: boolean | User$email_authArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    fovorite?: boolean | User$fovoriteArgs<ExtArgs>
    playlist?: boolean | User$playlistArgs<ExtArgs>
    email_auth?: boolean | User$email_authArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      fovorite: Prisma.$FavoritePayload<ExtArgs>[]
      playlist: Prisma.$PlaylistPayload<ExtArgs>[]
      email_auth: Prisma.$EmailAuthPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      email: string
      password: string
      role: string[]
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    fovorite<T extends User$fovoriteArgs<ExtArgs> = {}>(args?: Subset<T, User$fovoriteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'findMany'> | Null>;

    playlist<T extends User$playlistArgs<ExtArgs> = {}>(args?: Subset<T, User$playlistArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findMany'> | Null>;

    email_auth<T extends User$email_authArgs<ExtArgs> = {}>(args?: Subset<T, User$email_authArgs<ExtArgs>>): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.fovorite
   */
  export type User$fovoriteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }


  /**
   * User.playlist
   */
  export type User$playlistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    cursor?: PlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }


  /**
   * User.email_auth
   */
  export type User$email_authArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    where?: EmailAuthWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Song
   */

  export type AggregateSong = {
    _count: SongCountAggregateOutputType | null
    _avg: SongAvgAggregateOutputType | null
    _sum: SongSumAggregateOutputType | null
    _min: SongMinAggregateOutputType | null
    _max: SongMaxAggregateOutputType | null
  }

  export type SongAvgAggregateOutputType = {
    id: number | null
  }

  export type SongSumAggregateOutputType = {
    id: number | null
  }

  export type SongMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    audio: string | null
    artist: string | null
  }

  export type SongMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    audio: string | null
    artist: string | null
  }

  export type SongCountAggregateOutputType = {
    id: number
    name: number
    description: number
    audio: number
    artist: number
    _all: number
  }


  export type SongAvgAggregateInputType = {
    id?: true
  }

  export type SongSumAggregateInputType = {
    id?: true
  }

  export type SongMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    audio?: true
    artist?: true
  }

  export type SongMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    audio?: true
    artist?: true
  }

  export type SongCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    audio?: true
    artist?: true
    _all?: true
  }

  export type SongAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Song to aggregate.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Songs
    **/
    _count?: true | SongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SongAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SongSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SongMaxAggregateInputType
  }

  export type GetSongAggregateType<T extends SongAggregateArgs> = {
        [P in keyof T & keyof AggregateSong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSong[P]>
      : GetScalarType<T[P], AggregateSong[P]>
  }




  export type SongGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SongWhereInput
    orderBy?: SongOrderByWithAggregationInput | SongOrderByWithAggregationInput[]
    by: SongScalarFieldEnum[] | SongScalarFieldEnum
    having?: SongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SongCountAggregateInputType | true
    _avg?: SongAvgAggregateInputType
    _sum?: SongSumAggregateInputType
    _min?: SongMinAggregateInputType
    _max?: SongMaxAggregateInputType
  }

  export type SongGroupByOutputType = {
    id: number
    name: string
    description: string | null
    audio: string
    artist: string
    _count: SongCountAggregateOutputType | null
    _avg: SongAvgAggregateOutputType | null
    _sum: SongSumAggregateOutputType | null
    _min: SongMinAggregateOutputType | null
    _max: SongMaxAggregateOutputType | null
  }

  type GetSongGroupByPayload<T extends SongGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SongGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SongGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SongGroupByOutputType[P]>
            : GetScalarType<T[P], SongGroupByOutputType[P]>
        }
      >
    >


  export type SongSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    audio?: boolean
    artist?: boolean
    favorite?: boolean | Song$favoriteArgs<ExtArgs>
    playlist_songs?: boolean | Song$playlist_songsArgs<ExtArgs>
    album_songs?: boolean | Song$album_songsArgs<ExtArgs>
    _count?: boolean | SongCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["song"]>

  export type SongSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    audio?: boolean
    artist?: boolean
  }

  export type SongInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    favorite?: boolean | Song$favoriteArgs<ExtArgs>
    playlist_songs?: boolean | Song$playlist_songsArgs<ExtArgs>
    album_songs?: boolean | Song$album_songsArgs<ExtArgs>
    _count?: boolean | SongCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SongPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Song"
    objects: {
      favorite: Prisma.$FavoritePayload<ExtArgs>[]
      playlist_songs: Prisma.$PlaylistSongsPayload<ExtArgs>[]
      album_songs: Prisma.$AlbumSongsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      description: string | null
      audio: string
      artist: string
    }, ExtArgs["result"]["song"]>
    composites: {}
  }


  type SongGetPayload<S extends boolean | null | undefined | SongDefaultArgs> = $Result.GetResult<Prisma.$SongPayload, S>

  type SongCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SongFindManyArgs, 'select' | 'include'> & {
      select?: SongCountAggregateInputType | true
    }

  export interface SongDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Song'], meta: { name: 'Song' } }
    /**
     * Find zero or one Song that matches the filter.
     * @param {SongFindUniqueArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SongFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SongFindUniqueArgs<ExtArgs>>
    ): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Song that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SongFindUniqueOrThrowArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SongFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SongFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Song that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindFirstArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SongFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SongFindFirstArgs<ExtArgs>>
    ): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Song that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindFirstOrThrowArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SongFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SongFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Songs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Songs
     * const songs = await prisma.song.findMany()
     * 
     * // Get first 10 Songs
     * const songs = await prisma.song.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const songWithIdOnly = await prisma.song.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SongFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SongFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Song.
     * @param {SongCreateArgs} args - Arguments to create a Song.
     * @example
     * // Create one Song
     * const Song = await prisma.song.create({
     *   data: {
     *     // ... data to create a Song
     *   }
     * })
     * 
    **/
    create<T extends SongCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SongCreateArgs<ExtArgs>>
    ): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Songs.
     *     @param {SongCreateManyArgs} args - Arguments to create many Songs.
     *     @example
     *     // Create many Songs
     *     const song = await prisma.song.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SongCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SongCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Song.
     * @param {SongDeleteArgs} args - Arguments to delete one Song.
     * @example
     * // Delete one Song
     * const Song = await prisma.song.delete({
     *   where: {
     *     // ... filter to delete one Song
     *   }
     * })
     * 
    **/
    delete<T extends SongDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SongDeleteArgs<ExtArgs>>
    ): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Song.
     * @param {SongUpdateArgs} args - Arguments to update one Song.
     * @example
     * // Update one Song
     * const song = await prisma.song.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SongUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SongUpdateArgs<ExtArgs>>
    ): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Songs.
     * @param {SongDeleteManyArgs} args - Arguments to filter Songs to delete.
     * @example
     * // Delete a few Songs
     * const { count } = await prisma.song.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SongDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SongDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Songs
     * const song = await prisma.song.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SongUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SongUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Song.
     * @param {SongUpsertArgs} args - Arguments to update or create a Song.
     * @example
     * // Update or create a Song
     * const song = await prisma.song.upsert({
     *   create: {
     *     // ... data to create a Song
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Song we want to update
     *   }
     * })
    **/
    upsert<T extends SongUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SongUpsertArgs<ExtArgs>>
    ): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongCountArgs} args - Arguments to filter Songs to count.
     * @example
     * // Count the number of Songs
     * const count = await prisma.song.count({
     *   where: {
     *     // ... the filter for the Songs we want to count
     *   }
     * })
    **/
    count<T extends SongCountArgs>(
      args?: Subset<T, SongCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Song.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SongAggregateArgs>(args: Subset<T, SongAggregateArgs>): Prisma.PrismaPromise<GetSongAggregateType<T>>

    /**
     * Group by Song.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SongGroupByArgs['orderBy'] }
        : { orderBy?: SongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSongGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Song model
   */
  readonly fields: SongFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Song.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SongClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    favorite<T extends Song$favoriteArgs<ExtArgs> = {}>(args?: Subset<T, Song$favoriteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'findMany'> | Null>;

    playlist_songs<T extends Song$playlist_songsArgs<ExtArgs> = {}>(args?: Subset<T, Song$playlist_songsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'findMany'> | Null>;

    album_songs<T extends Song$album_songsArgs<ExtArgs> = {}>(args?: Subset<T, Song$album_songsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Song model
   */ 
  interface SongFieldRefs {
    readonly id: FieldRef<"Song", 'Int'>
    readonly name: FieldRef<"Song", 'String'>
    readonly description: FieldRef<"Song", 'String'>
    readonly audio: FieldRef<"Song", 'String'>
    readonly artist: FieldRef<"Song", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Song findUnique
   */
  export type SongFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where: SongWhereUniqueInput
  }


  /**
   * Song findUniqueOrThrow
   */
  export type SongFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where: SongWhereUniqueInput
  }


  /**
   * Song findFirst
   */
  export type SongFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Songs.
     */
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }


  /**
   * Song findFirstOrThrow
   */
  export type SongFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Songs.
     */
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }


  /**
   * Song findMany
   */
  export type SongFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Songs to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }


  /**
   * Song create
   */
  export type SongCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The data needed to create a Song.
     */
    data: XOR<SongCreateInput, SongUncheckedCreateInput>
  }


  /**
   * Song createMany
   */
  export type SongCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Songs.
     */
    data: SongCreateManyInput | SongCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Song update
   */
  export type SongUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The data needed to update a Song.
     */
    data: XOR<SongUpdateInput, SongUncheckedUpdateInput>
    /**
     * Choose, which Song to update.
     */
    where: SongWhereUniqueInput
  }


  /**
   * Song updateMany
   */
  export type SongUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Songs.
     */
    data: XOR<SongUpdateManyMutationInput, SongUncheckedUpdateManyInput>
    /**
     * Filter which Songs to update
     */
    where?: SongWhereInput
  }


  /**
   * Song upsert
   */
  export type SongUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The filter to search for the Song to update in case it exists.
     */
    where: SongWhereUniqueInput
    /**
     * In case the Song found by the `where` argument doesn't exist, create a new Song with this data.
     */
    create: XOR<SongCreateInput, SongUncheckedCreateInput>
    /**
     * In case the Song was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SongUpdateInput, SongUncheckedUpdateInput>
  }


  /**
   * Song delete
   */
  export type SongDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter which Song to delete.
     */
    where: SongWhereUniqueInput
  }


  /**
   * Song deleteMany
   */
  export type SongDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Songs to delete
     */
    where?: SongWhereInput
  }


  /**
   * Song.favorite
   */
  export type Song$favoriteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }


  /**
   * Song.playlist_songs
   */
  export type Song$playlist_songsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    where?: PlaylistSongsWhereInput
    orderBy?: PlaylistSongsOrderByWithRelationInput | PlaylistSongsOrderByWithRelationInput[]
    cursor?: PlaylistSongsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistSongsScalarFieldEnum | PlaylistSongsScalarFieldEnum[]
  }


  /**
   * Song.album_songs
   */
  export type Song$album_songsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    where?: AlbumSongsWhereInput
    orderBy?: AlbumSongsOrderByWithRelationInput | AlbumSongsOrderByWithRelationInput[]
    cursor?: AlbumSongsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumSongsScalarFieldEnum | AlbumSongsScalarFieldEnum[]
  }


  /**
   * Song without action
   */
  export type SongDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SongInclude<ExtArgs> | null
  }



  /**
   * Model Album
   */

  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumAvgAggregateOutputType = {
    id: number | null
  }

  export type AlbumSumAggregateOutputType = {
    id: number | null
  }

  export type AlbumMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    author: string | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    author: string | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    title: number
    description: number
    author: number
    _all: number
  }


  export type AlbumAvgAggregateInputType = {
    id?: true
  }

  export type AlbumSumAggregateInputType = {
    id?: true
  }

  export type AlbumMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    author?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    author?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    author?: true
    _all?: true
  }

  export type AlbumAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Album to aggregate.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithAggregationInput | AlbumOrderByWithAggregationInput[]
    by: AlbumScalarFieldEnum[] | AlbumScalarFieldEnum
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _avg?: AlbumAvgAggregateInputType
    _sum?: AlbumSumAggregateInputType
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }

  export type AlbumGroupByOutputType = {
    id: number
    title: string
    description: string
    author: string
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    author?: boolean
    album_songs?: boolean | Album$album_songsArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    author?: boolean
  }

  export type AlbumInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    album_songs?: boolean | Album$album_songsArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AlbumPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Album"
    objects: {
      album_songs: Prisma.$AlbumSongsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      title: string
      description: string
      author: string
    }, ExtArgs["result"]["album"]>
    composites: {}
  }


  type AlbumGetPayload<S extends boolean | null | undefined | AlbumDefaultArgs> = $Result.GetResult<Prisma.$AlbumPayload, S>

  type AlbumCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AlbumFindManyArgs, 'select' | 'include'> & {
      select?: AlbumCountAggregateInputType | true
    }

  export interface AlbumDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Album'], meta: { name: 'Album' } }
    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlbumFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumFindUniqueArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Album that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlbumFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumFindFirstArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Album that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AlbumFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
    **/
    create<T extends AlbumCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumCreateArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Albums.
     *     @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     *     @example
     *     // Create many Albums
     *     const album = await prisma.album.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlbumCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
    **/
    delete<T extends AlbumDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumDeleteArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlbumUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumUpdateArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlbumDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlbumUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
    **/
    upsert<T extends AlbumUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumUpsertArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): Prisma.PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Album model
   */
  readonly fields: AlbumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    album_songs<T extends Album$album_songsArgs<ExtArgs> = {}>(args?: Subset<T, Album$album_songsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Album model
   */ 
  interface AlbumFieldRefs {
    readonly id: FieldRef<"Album", 'Int'>
    readonly title: FieldRef<"Album", 'String'>
    readonly description: FieldRef<"Album", 'String'>
    readonly author: FieldRef<"Album", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Album findUnique
   */
  export type AlbumFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album findFirst
   */
  export type AlbumFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }


  /**
   * Album findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }


  /**
   * Album findMany
   */
  export type AlbumFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Albums to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }


  /**
   * Album create
   */
  export type AlbumCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to create a Album.
     */
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }


  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Album update
   */
  export type AlbumUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to update a Album.
     */
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
  }


  /**
   * Album upsert
   */
  export type AlbumUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The filter to search for the Album to update in case it exists.
     */
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     */
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }


  /**
   * Album delete
   */
  export type AlbumDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter which Album to delete.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Albums to delete
     */
    where?: AlbumWhereInput
  }


  /**
   * Album.album_songs
   */
  export type Album$album_songsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    where?: AlbumSongsWhereInput
    orderBy?: AlbumSongsOrderByWithRelationInput | AlbumSongsOrderByWithRelationInput[]
    cursor?: AlbumSongsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumSongsScalarFieldEnum | AlbumSongsScalarFieldEnum[]
  }


  /**
   * Album without action
   */
  export type AlbumDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
  }



  /**
   * Model Favorite
   */

  export type AggregateFavorite = {
    _count: FavoriteCountAggregateOutputType | null
    _avg: FavoriteAvgAggregateOutputType | null
    _sum: FavoriteSumAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  export type FavoriteAvgAggregateOutputType = {
    id: number | null
    song_id: number | null
  }

  export type FavoriteSumAggregateOutputType = {
    id: number | null
    song_id: number | null
  }

  export type FavoriteMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    song_id: number | null
  }

  export type FavoriteMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    song_id: number | null
  }

  export type FavoriteCountAggregateOutputType = {
    id: number
    user_id: number
    song_id: number
    _all: number
  }


  export type FavoriteAvgAggregateInputType = {
    id?: true
    song_id?: true
  }

  export type FavoriteSumAggregateInputType = {
    id?: true
    song_id?: true
  }

  export type FavoriteMinAggregateInputType = {
    id?: true
    user_id?: true
    song_id?: true
  }

  export type FavoriteMaxAggregateInputType = {
    id?: true
    user_id?: true
    song_id?: true
  }

  export type FavoriteCountAggregateInputType = {
    id?: true
    user_id?: true
    song_id?: true
    _all?: true
  }

  export type FavoriteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorite to aggregate.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favorites
    **/
    _count?: true | FavoriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMaxAggregateInputType
  }

  export type GetFavoriteAggregateType<T extends FavoriteAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorite[P]>
      : GetScalarType<T[P], AggregateFavorite[P]>
  }




  export type FavoriteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithAggregationInput | FavoriteOrderByWithAggregationInput[]
    by: FavoriteScalarFieldEnum[] | FavoriteScalarFieldEnum
    having?: FavoriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteCountAggregateInputType | true
    _avg?: FavoriteAvgAggregateInputType
    _sum?: FavoriteSumAggregateInputType
    _min?: FavoriteMinAggregateInputType
    _max?: FavoriteMaxAggregateInputType
  }

  export type FavoriteGroupByOutputType = {
    id: number
    user_id: string
    song_id: number
    _count: FavoriteCountAggregateOutputType | null
    _avg: FavoriteAvgAggregateOutputType | null
    _sum: FavoriteSumAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  type GetFavoriteGroupByPayload<T extends FavoriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    song_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectScalar = {
    id?: boolean
    user_id?: boolean
    song_id?: boolean
  }

  export type FavoriteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }


  export type $FavoritePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Favorite"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      song: Prisma.$SongPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      user_id: string
      song_id: number
    }, ExtArgs["result"]["favorite"]>
    composites: {}
  }


  type FavoriteGetPayload<S extends boolean | null | undefined | FavoriteDefaultArgs> = $Result.GetResult<Prisma.$FavoritePayload, S>

  type FavoriteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FavoriteFindManyArgs, 'select' | 'include'> & {
      select?: FavoriteCountAggregateInputType | true
    }

  export interface FavoriteDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favorite'], meta: { name: 'Favorite' } }
    /**
     * Find zero or one Favorite that matches the filter.
     * @param {FavoriteFindUniqueArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavoriteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteFindUniqueArgs<ExtArgs>>
    ): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Favorite that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavoriteFindUniqueOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavoriteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Favorite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavoriteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteFindFirstArgs<ExtArgs>>
    ): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Favorite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavoriteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorite.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteWithIdOnly = await prisma.favorite.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FavoriteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Favorite.
     * @param {FavoriteCreateArgs} args - Arguments to create a Favorite.
     * @example
     * // Create one Favorite
     * const Favorite = await prisma.favorite.create({
     *   data: {
     *     // ... data to create a Favorite
     *   }
     * })
     * 
    **/
    create<T extends FavoriteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteCreateArgs<ExtArgs>>
    ): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Favorites.
     *     @param {FavoriteCreateManyArgs} args - Arguments to create many Favorites.
     *     @example
     *     // Create many Favorites
     *     const favorite = await prisma.favorite.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavoriteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Favorite.
     * @param {FavoriteDeleteArgs} args - Arguments to delete one Favorite.
     * @example
     * // Delete one Favorite
     * const Favorite = await prisma.favorite.delete({
     *   where: {
     *     // ... filter to delete one Favorite
     *   }
     * })
     * 
    **/
    delete<T extends FavoriteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteDeleteArgs<ExtArgs>>
    ): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Favorite.
     * @param {FavoriteUpdateArgs} args - Arguments to update one Favorite.
     * @example
     * // Update one Favorite
     * const favorite = await prisma.favorite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavoriteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteUpdateArgs<ExtArgs>>
    ): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Favorites.
     * @param {FavoriteDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavoriteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoriteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavoriteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favorite.
     * @param {FavoriteUpsertArgs} args - Arguments to update or create a Favorite.
     * @example
     * // Update or create a Favorite
     * const favorite = await prisma.favorite.upsert({
     *   create: {
     *     // ... data to create a Favorite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorite we want to update
     *   }
     * })
    **/
    upsert<T extends FavoriteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FavoriteUpsertArgs<ExtArgs>>
    ): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorite.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends FavoriteCountArgs>(
      args?: Subset<T, FavoriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteAggregateArgs>(args: Subset<T, FavoriteAggregateArgs>): Prisma.PrismaPromise<GetFavoriteAggregateType<T>>

    /**
     * Group by Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favorite model
   */
  readonly fields: FavoriteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    song<T extends SongDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SongDefaultArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Favorite model
   */ 
  interface FavoriteFieldRefs {
    readonly id: FieldRef<"Favorite", 'Int'>
    readonly user_id: FieldRef<"Favorite", 'String'>
    readonly song_id: FieldRef<"Favorite", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Favorite findUnique
   */
  export type FavoriteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }


  /**
   * Favorite findUniqueOrThrow
   */
  export type FavoriteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }


  /**
   * Favorite findFirst
   */
  export type FavoriteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }


  /**
   * Favorite findFirstOrThrow
   */
  export type FavoriteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }


  /**
   * Favorite findMany
   */
  export type FavoriteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }


  /**
   * Favorite create
   */
  export type FavoriteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to create a Favorite.
     */
    data: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
  }


  /**
   * Favorite createMany
   */
  export type FavoriteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Favorite update
   */
  export type FavoriteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to update a Favorite.
     */
    data: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
    /**
     * Choose, which Favorite to update.
     */
    where: FavoriteWhereUniqueInput
  }


  /**
   * Favorite updateMany
   */
  export type FavoriteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoriteWhereInput
  }


  /**
   * Favorite upsert
   */
  export type FavoriteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The filter to search for the Favorite to update in case it exists.
     */
    where: FavoriteWhereUniqueInput
    /**
     * In case the Favorite found by the `where` argument doesn't exist, create a new Favorite with this data.
     */
    create: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
    /**
     * In case the Favorite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
  }


  /**
   * Favorite delete
   */
  export type FavoriteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter which Favorite to delete.
     */
    where: FavoriteWhereUniqueInput
  }


  /**
   * Favorite deleteMany
   */
  export type FavoriteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorites to delete
     */
    where?: FavoriteWhereInput
  }


  /**
   * Favorite without action
   */
  export type FavoriteDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoriteInclude<ExtArgs> | null
  }



  /**
   * Model Playlist
   */

  export type AggregatePlaylist = {
    _count: PlaylistCountAggregateOutputType | null
    _avg: PlaylistAvgAggregateOutputType | null
    _sum: PlaylistSumAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  export type PlaylistAvgAggregateOutputType = {
    id: number | null
  }

  export type PlaylistSumAggregateOutputType = {
    id: number | null
  }

  export type PlaylistMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    user_id: string | null
  }

  export type PlaylistMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    user_id: string | null
  }

  export type PlaylistCountAggregateOutputType = {
    id: number
    title: number
    description: number
    user_id: number
    _all: number
  }


  export type PlaylistAvgAggregateInputType = {
    id?: true
  }

  export type PlaylistSumAggregateInputType = {
    id?: true
  }

  export type PlaylistMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    user_id?: true
  }

  export type PlaylistMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    user_id?: true
  }

  export type PlaylistCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    user_id?: true
    _all?: true
  }

  export type PlaylistAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Playlist to aggregate.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Playlists
    **/
    _count?: true | PlaylistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaylistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaylistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistMaxAggregateInputType
  }

  export type GetPlaylistAggregateType<T extends PlaylistAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylist[P]>
      : GetScalarType<T[P], AggregatePlaylist[P]>
  }




  export type PlaylistGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithAggregationInput | PlaylistOrderByWithAggregationInput[]
    by: PlaylistScalarFieldEnum[] | PlaylistScalarFieldEnum
    having?: PlaylistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistCountAggregateInputType | true
    _avg?: PlaylistAvgAggregateInputType
    _sum?: PlaylistSumAggregateInputType
    _min?: PlaylistMinAggregateInputType
    _max?: PlaylistMaxAggregateInputType
  }

  export type PlaylistGroupByOutputType = {
    id: number
    title: string
    description: string
    user_id: string
    _count: PlaylistCountAggregateOutputType | null
    _avg: PlaylistAvgAggregateOutputType | null
    _sum: PlaylistSumAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  type GetPlaylistGroupByPayload<T extends PlaylistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaylistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
        }
      >
    >


  export type PlaylistSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    user_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlist_songs?: boolean | Playlist$playlist_songsArgs<ExtArgs>
    _count?: boolean | PlaylistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlist"]>

  export type PlaylistSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    user_id?: boolean
  }

  export type PlaylistInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlist_songs?: boolean | Playlist$playlist_songsArgs<ExtArgs>
    _count?: boolean | PlaylistCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlaylistPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Playlist"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      playlist_songs: Prisma.$PlaylistSongsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      title: string
      description: string
      user_id: string
    }, ExtArgs["result"]["playlist"]>
    composites: {}
  }


  type PlaylistGetPayload<S extends boolean | null | undefined | PlaylistDefaultArgs> = $Result.GetResult<Prisma.$PlaylistPayload, S>

  type PlaylistCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PlaylistFindManyArgs, 'select' | 'include'> & {
      select?: PlaylistCountAggregateInputType | true
    }

  export interface PlaylistDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Playlist'], meta: { name: 'Playlist' } }
    /**
     * Find zero or one Playlist that matches the filter.
     * @param {PlaylistFindUniqueArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlaylistFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistFindUniqueArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Playlist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlaylistFindUniqueOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlaylistFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Playlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlaylistFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindFirstArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Playlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlaylistFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Playlists
     * const playlists = await prisma.playlist.findMany()
     * 
     * // Get first 10 Playlists
     * const playlists = await prisma.playlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistWithIdOnly = await prisma.playlist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlaylistFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Playlist.
     * @param {PlaylistCreateArgs} args - Arguments to create a Playlist.
     * @example
     * // Create one Playlist
     * const Playlist = await prisma.playlist.create({
     *   data: {
     *     // ... data to create a Playlist
     *   }
     * })
     * 
    **/
    create<T extends PlaylistCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistCreateArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Playlists.
     *     @param {PlaylistCreateManyArgs} args - Arguments to create many Playlists.
     *     @example
     *     // Create many Playlists
     *     const playlist = await prisma.playlist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlaylistCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Playlist.
     * @param {PlaylistDeleteArgs} args - Arguments to delete one Playlist.
     * @example
     * // Delete one Playlist
     * const Playlist = await prisma.playlist.delete({
     *   where: {
     *     // ... filter to delete one Playlist
     *   }
     * })
     * 
    **/
    delete<T extends PlaylistDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistDeleteArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Playlist.
     * @param {PlaylistUpdateArgs} args - Arguments to update one Playlist.
     * @example
     * // Update one Playlist
     * const playlist = await prisma.playlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlaylistUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpdateArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Playlists.
     * @param {PlaylistDeleteManyArgs} args - Arguments to filter Playlists to delete.
     * @example
     * // Delete a few Playlists
     * const { count } = await prisma.playlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlaylistDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Playlists
     * const playlist = await prisma.playlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlaylistUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Playlist.
     * @param {PlaylistUpsertArgs} args - Arguments to update or create a Playlist.
     * @example
     * // Update or create a Playlist
     * const playlist = await prisma.playlist.upsert({
     *   create: {
     *     // ... data to create a Playlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Playlist we want to update
     *   }
     * })
    **/
    upsert<T extends PlaylistUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpsertArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistCountArgs} args - Arguments to filter Playlists to count.
     * @example
     * // Count the number of Playlists
     * const count = await prisma.playlist.count({
     *   where: {
     *     // ... the filter for the Playlists we want to count
     *   }
     * })
    **/
    count<T extends PlaylistCountArgs>(
      args?: Subset<T, PlaylistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistAggregateArgs>(args: Subset<T, PlaylistAggregateArgs>): Prisma.PrismaPromise<GetPlaylistAggregateType<T>>

    /**
     * Group by Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Playlist model
   */
  readonly fields: PlaylistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Playlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaylistClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    playlist_songs<T extends Playlist$playlist_songsArgs<ExtArgs> = {}>(args?: Subset<T, Playlist$playlist_songsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Playlist model
   */ 
  interface PlaylistFieldRefs {
    readonly id: FieldRef<"Playlist", 'Int'>
    readonly title: FieldRef<"Playlist", 'String'>
    readonly description: FieldRef<"Playlist", 'String'>
    readonly user_id: FieldRef<"Playlist", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Playlist findUnique
   */
  export type PlaylistFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist findUniqueOrThrow
   */
  export type PlaylistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist findFirst
   */
  export type PlaylistFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }


  /**
   * Playlist findFirstOrThrow
   */
  export type PlaylistFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }


  /**
   * Playlist findMany
   */
  export type PlaylistFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlists to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }


  /**
   * Playlist create
   */
  export type PlaylistCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The data needed to create a Playlist.
     */
    data: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
  }


  /**
   * Playlist createMany
   */
  export type PlaylistCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Playlists.
     */
    data: PlaylistCreateManyInput | PlaylistCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Playlist update
   */
  export type PlaylistUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The data needed to update a Playlist.
     */
    data: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
    /**
     * Choose, which Playlist to update.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist updateMany
   */
  export type PlaylistUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Playlists.
     */
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyInput>
    /**
     * Filter which Playlists to update
     */
    where?: PlaylistWhereInput
  }


  /**
   * Playlist upsert
   */
  export type PlaylistUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The filter to search for the Playlist to update in case it exists.
     */
    where: PlaylistWhereUniqueInput
    /**
     * In case the Playlist found by the `where` argument doesn't exist, create a new Playlist with this data.
     */
    create: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
    /**
     * In case the Playlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
  }


  /**
   * Playlist delete
   */
  export type PlaylistDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter which Playlist to delete.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist deleteMany
   */
  export type PlaylistDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Playlists to delete
     */
    where?: PlaylistWhereInput
  }


  /**
   * Playlist.playlist_songs
   */
  export type Playlist$playlist_songsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    where?: PlaylistSongsWhereInput
    orderBy?: PlaylistSongsOrderByWithRelationInput | PlaylistSongsOrderByWithRelationInput[]
    cursor?: PlaylistSongsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistSongsScalarFieldEnum | PlaylistSongsScalarFieldEnum[]
  }


  /**
   * Playlist without action
   */
  export type PlaylistDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
  }



  /**
   * Model AlbumSongs
   */

  export type AggregateAlbumSongs = {
    _count: AlbumSongsCountAggregateOutputType | null
    _avg: AlbumSongsAvgAggregateOutputType | null
    _sum: AlbumSongsSumAggregateOutputType | null
    _min: AlbumSongsMinAggregateOutputType | null
    _max: AlbumSongsMaxAggregateOutputType | null
  }

  export type AlbumSongsAvgAggregateOutputType = {
    id: number | null
    album_id: number | null
    song_id: number | null
  }

  export type AlbumSongsSumAggregateOutputType = {
    id: number | null
    album_id: number | null
    song_id: number | null
  }

  export type AlbumSongsMinAggregateOutputType = {
    id: number | null
    album_id: number | null
    song_id: number | null
  }

  export type AlbumSongsMaxAggregateOutputType = {
    id: number | null
    album_id: number | null
    song_id: number | null
  }

  export type AlbumSongsCountAggregateOutputType = {
    id: number
    album_id: number
    song_id: number
    _all: number
  }


  export type AlbumSongsAvgAggregateInputType = {
    id?: true
    album_id?: true
    song_id?: true
  }

  export type AlbumSongsSumAggregateInputType = {
    id?: true
    album_id?: true
    song_id?: true
  }

  export type AlbumSongsMinAggregateInputType = {
    id?: true
    album_id?: true
    song_id?: true
  }

  export type AlbumSongsMaxAggregateInputType = {
    id?: true
    album_id?: true
    song_id?: true
  }

  export type AlbumSongsCountAggregateInputType = {
    id?: true
    album_id?: true
    song_id?: true
    _all?: true
  }

  export type AlbumSongsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlbumSongs to aggregate.
     */
    where?: AlbumSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumSongs to fetch.
     */
    orderBy?: AlbumSongsOrderByWithRelationInput | AlbumSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlbumSongs
    **/
    _count?: true | AlbumSongsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumSongsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumSongsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumSongsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumSongsMaxAggregateInputType
  }

  export type GetAlbumSongsAggregateType<T extends AlbumSongsAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbumSongs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbumSongs[P]>
      : GetScalarType<T[P], AggregateAlbumSongs[P]>
  }




  export type AlbumSongsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AlbumSongsWhereInput
    orderBy?: AlbumSongsOrderByWithAggregationInput | AlbumSongsOrderByWithAggregationInput[]
    by: AlbumSongsScalarFieldEnum[] | AlbumSongsScalarFieldEnum
    having?: AlbumSongsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumSongsCountAggregateInputType | true
    _avg?: AlbumSongsAvgAggregateInputType
    _sum?: AlbumSongsSumAggregateInputType
    _min?: AlbumSongsMinAggregateInputType
    _max?: AlbumSongsMaxAggregateInputType
  }

  export type AlbumSongsGroupByOutputType = {
    id: number
    album_id: number
    song_id: number
    _count: AlbumSongsCountAggregateOutputType | null
    _avg: AlbumSongsAvgAggregateOutputType | null
    _sum: AlbumSongsSumAggregateOutputType | null
    _min: AlbumSongsMinAggregateOutputType | null
    _max: AlbumSongsMaxAggregateOutputType | null
  }

  type GetAlbumSongsGroupByPayload<T extends AlbumSongsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumSongsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumSongsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumSongsGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumSongsGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSongsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    album_id?: boolean
    song_id?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["albumSongs"]>

  export type AlbumSongsSelectScalar = {
    id?: boolean
    album_id?: boolean
    song_id?: boolean
  }

  export type AlbumSongsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }


  export type $AlbumSongsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "AlbumSongs"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      song: Prisma.$SongPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      album_id: number
      song_id: number
    }, ExtArgs["result"]["albumSongs"]>
    composites: {}
  }


  type AlbumSongsGetPayload<S extends boolean | null | undefined | AlbumSongsDefaultArgs> = $Result.GetResult<Prisma.$AlbumSongsPayload, S>

  type AlbumSongsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AlbumSongsFindManyArgs, 'select' | 'include'> & {
      select?: AlbumSongsCountAggregateInputType | true
    }

  export interface AlbumSongsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlbumSongs'], meta: { name: 'AlbumSongs' } }
    /**
     * Find zero or one AlbumSongs that matches the filter.
     * @param {AlbumSongsFindUniqueArgs} args - Arguments to find a AlbumSongs
     * @example
     * // Get one AlbumSongs
     * const albumSongs = await prisma.albumSongs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlbumSongsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumSongsFindUniqueArgs<ExtArgs>>
    ): Prisma__AlbumSongsClient<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AlbumSongs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlbumSongsFindUniqueOrThrowArgs} args - Arguments to find a AlbumSongs
     * @example
     * // Get one AlbumSongs
     * const albumSongs = await prisma.albumSongs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlbumSongsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumSongsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AlbumSongsClient<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AlbumSongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumSongsFindFirstArgs} args - Arguments to find a AlbumSongs
     * @example
     * // Get one AlbumSongs
     * const albumSongs = await prisma.albumSongs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlbumSongsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumSongsFindFirstArgs<ExtArgs>>
    ): Prisma__AlbumSongsClient<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AlbumSongs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumSongsFindFirstOrThrowArgs} args - Arguments to find a AlbumSongs
     * @example
     * // Get one AlbumSongs
     * const albumSongs = await prisma.albumSongs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlbumSongsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumSongsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AlbumSongsClient<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AlbumSongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumSongsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlbumSongs
     * const albumSongs = await prisma.albumSongs.findMany()
     * 
     * // Get first 10 AlbumSongs
     * const albumSongs = await prisma.albumSongs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumSongsWithIdOnly = await prisma.albumSongs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AlbumSongsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumSongsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AlbumSongs.
     * @param {AlbumSongsCreateArgs} args - Arguments to create a AlbumSongs.
     * @example
     * // Create one AlbumSongs
     * const AlbumSongs = await prisma.albumSongs.create({
     *   data: {
     *     // ... data to create a AlbumSongs
     *   }
     * })
     * 
    **/
    create<T extends AlbumSongsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumSongsCreateArgs<ExtArgs>>
    ): Prisma__AlbumSongsClient<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AlbumSongs.
     *     @param {AlbumSongsCreateManyArgs} args - Arguments to create many AlbumSongs.
     *     @example
     *     // Create many AlbumSongs
     *     const albumSongs = await prisma.albumSongs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlbumSongsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumSongsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AlbumSongs.
     * @param {AlbumSongsDeleteArgs} args - Arguments to delete one AlbumSongs.
     * @example
     * // Delete one AlbumSongs
     * const AlbumSongs = await prisma.albumSongs.delete({
     *   where: {
     *     // ... filter to delete one AlbumSongs
     *   }
     * })
     * 
    **/
    delete<T extends AlbumSongsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumSongsDeleteArgs<ExtArgs>>
    ): Prisma__AlbumSongsClient<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AlbumSongs.
     * @param {AlbumSongsUpdateArgs} args - Arguments to update one AlbumSongs.
     * @example
     * // Update one AlbumSongs
     * const albumSongs = await prisma.albumSongs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlbumSongsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumSongsUpdateArgs<ExtArgs>>
    ): Prisma__AlbumSongsClient<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AlbumSongs.
     * @param {AlbumSongsDeleteManyArgs} args - Arguments to filter AlbumSongs to delete.
     * @example
     * // Delete a few AlbumSongs
     * const { count } = await prisma.albumSongs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlbumSongsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumSongsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlbumSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumSongsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlbumSongs
     * const albumSongs = await prisma.albumSongs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlbumSongsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumSongsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AlbumSongs.
     * @param {AlbumSongsUpsertArgs} args - Arguments to update or create a AlbumSongs.
     * @example
     * // Update or create a AlbumSongs
     * const albumSongs = await prisma.albumSongs.upsert({
     *   create: {
     *     // ... data to create a AlbumSongs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlbumSongs we want to update
     *   }
     * })
    **/
    upsert<T extends AlbumSongsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumSongsUpsertArgs<ExtArgs>>
    ): Prisma__AlbumSongsClient<$Result.GetResult<Prisma.$AlbumSongsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AlbumSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumSongsCountArgs} args - Arguments to filter AlbumSongs to count.
     * @example
     * // Count the number of AlbumSongs
     * const count = await prisma.albumSongs.count({
     *   where: {
     *     // ... the filter for the AlbumSongs we want to count
     *   }
     * })
    **/
    count<T extends AlbumSongsCountArgs>(
      args?: Subset<T, AlbumSongsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumSongsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlbumSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumSongsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumSongsAggregateArgs>(args: Subset<T, AlbumSongsAggregateArgs>): Prisma.PrismaPromise<GetAlbumSongsAggregateType<T>>

    /**
     * Group by AlbumSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumSongsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumSongsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumSongsGroupByArgs['orderBy'] }
        : { orderBy?: AlbumSongsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumSongsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumSongsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlbumSongs model
   */
  readonly fields: AlbumSongsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlbumSongs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumSongsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    song<T extends SongDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SongDefaultArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AlbumSongs model
   */ 
  interface AlbumSongsFieldRefs {
    readonly id: FieldRef<"AlbumSongs", 'Int'>
    readonly album_id: FieldRef<"AlbumSongs", 'Int'>
    readonly song_id: FieldRef<"AlbumSongs", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * AlbumSongs findUnique
   */
  export type AlbumSongsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * Filter, which AlbumSongs to fetch.
     */
    where: AlbumSongsWhereUniqueInput
  }


  /**
   * AlbumSongs findUniqueOrThrow
   */
  export type AlbumSongsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * Filter, which AlbumSongs to fetch.
     */
    where: AlbumSongsWhereUniqueInput
  }


  /**
   * AlbumSongs findFirst
   */
  export type AlbumSongsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * Filter, which AlbumSongs to fetch.
     */
    where?: AlbumSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumSongs to fetch.
     */
    orderBy?: AlbumSongsOrderByWithRelationInput | AlbumSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlbumSongs.
     */
    cursor?: AlbumSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlbumSongs.
     */
    distinct?: AlbumSongsScalarFieldEnum | AlbumSongsScalarFieldEnum[]
  }


  /**
   * AlbumSongs findFirstOrThrow
   */
  export type AlbumSongsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * Filter, which AlbumSongs to fetch.
     */
    where?: AlbumSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumSongs to fetch.
     */
    orderBy?: AlbumSongsOrderByWithRelationInput | AlbumSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlbumSongs.
     */
    cursor?: AlbumSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlbumSongs.
     */
    distinct?: AlbumSongsScalarFieldEnum | AlbumSongsScalarFieldEnum[]
  }


  /**
   * AlbumSongs findMany
   */
  export type AlbumSongsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * Filter, which AlbumSongs to fetch.
     */
    where?: AlbumSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumSongs to fetch.
     */
    orderBy?: AlbumSongsOrderByWithRelationInput | AlbumSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlbumSongs.
     */
    cursor?: AlbumSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumSongs.
     */
    skip?: number
    distinct?: AlbumSongsScalarFieldEnum | AlbumSongsScalarFieldEnum[]
  }


  /**
   * AlbumSongs create
   */
  export type AlbumSongsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * The data needed to create a AlbumSongs.
     */
    data: XOR<AlbumSongsCreateInput, AlbumSongsUncheckedCreateInput>
  }


  /**
   * AlbumSongs createMany
   */
  export type AlbumSongsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlbumSongs.
     */
    data: AlbumSongsCreateManyInput | AlbumSongsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AlbumSongs update
   */
  export type AlbumSongsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * The data needed to update a AlbumSongs.
     */
    data: XOR<AlbumSongsUpdateInput, AlbumSongsUncheckedUpdateInput>
    /**
     * Choose, which AlbumSongs to update.
     */
    where: AlbumSongsWhereUniqueInput
  }


  /**
   * AlbumSongs updateMany
   */
  export type AlbumSongsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlbumSongs.
     */
    data: XOR<AlbumSongsUpdateManyMutationInput, AlbumSongsUncheckedUpdateManyInput>
    /**
     * Filter which AlbumSongs to update
     */
    where?: AlbumSongsWhereInput
  }


  /**
   * AlbumSongs upsert
   */
  export type AlbumSongsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * The filter to search for the AlbumSongs to update in case it exists.
     */
    where: AlbumSongsWhereUniqueInput
    /**
     * In case the AlbumSongs found by the `where` argument doesn't exist, create a new AlbumSongs with this data.
     */
    create: XOR<AlbumSongsCreateInput, AlbumSongsUncheckedCreateInput>
    /**
     * In case the AlbumSongs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumSongsUpdateInput, AlbumSongsUncheckedUpdateInput>
  }


  /**
   * AlbumSongs delete
   */
  export type AlbumSongsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
    /**
     * Filter which AlbumSongs to delete.
     */
    where: AlbumSongsWhereUniqueInput
  }


  /**
   * AlbumSongs deleteMany
   */
  export type AlbumSongsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlbumSongs to delete
     */
    where?: AlbumSongsWhereInput
  }


  /**
   * AlbumSongs without action
   */
  export type AlbumSongsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumSongs
     */
    select?: AlbumSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumSongsInclude<ExtArgs> | null
  }



  /**
   * Model PlaylistSongs
   */

  export type AggregatePlaylistSongs = {
    _count: PlaylistSongsCountAggregateOutputType | null
    _avg: PlaylistSongsAvgAggregateOutputType | null
    _sum: PlaylistSongsSumAggregateOutputType | null
    _min: PlaylistSongsMinAggregateOutputType | null
    _max: PlaylistSongsMaxAggregateOutputType | null
  }

  export type PlaylistSongsAvgAggregateOutputType = {
    id: number | null
    playlist_id: number | null
    song_id: number | null
  }

  export type PlaylistSongsSumAggregateOutputType = {
    id: number | null
    playlist_id: number | null
    song_id: number | null
  }

  export type PlaylistSongsMinAggregateOutputType = {
    id: number | null
    playlist_id: number | null
    song_id: number | null
  }

  export type PlaylistSongsMaxAggregateOutputType = {
    id: number | null
    playlist_id: number | null
    song_id: number | null
  }

  export type PlaylistSongsCountAggregateOutputType = {
    id: number
    playlist_id: number
    song_id: number
    _all: number
  }


  export type PlaylistSongsAvgAggregateInputType = {
    id?: true
    playlist_id?: true
    song_id?: true
  }

  export type PlaylistSongsSumAggregateInputType = {
    id?: true
    playlist_id?: true
    song_id?: true
  }

  export type PlaylistSongsMinAggregateInputType = {
    id?: true
    playlist_id?: true
    song_id?: true
  }

  export type PlaylistSongsMaxAggregateInputType = {
    id?: true
    playlist_id?: true
    song_id?: true
  }

  export type PlaylistSongsCountAggregateInputType = {
    id?: true
    playlist_id?: true
    song_id?: true
    _all?: true
  }

  export type PlaylistSongsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlaylistSongs to aggregate.
     */
    where?: PlaylistSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistSongs to fetch.
     */
    orderBy?: PlaylistSongsOrderByWithRelationInput | PlaylistSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaylistSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlaylistSongs
    **/
    _count?: true | PlaylistSongsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaylistSongsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaylistSongsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistSongsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistSongsMaxAggregateInputType
  }

  export type GetPlaylistSongsAggregateType<T extends PlaylistSongsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylistSongs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylistSongs[P]>
      : GetScalarType<T[P], AggregatePlaylistSongs[P]>
  }




  export type PlaylistSongsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PlaylistSongsWhereInput
    orderBy?: PlaylistSongsOrderByWithAggregationInput | PlaylistSongsOrderByWithAggregationInput[]
    by: PlaylistSongsScalarFieldEnum[] | PlaylistSongsScalarFieldEnum
    having?: PlaylistSongsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistSongsCountAggregateInputType | true
    _avg?: PlaylistSongsAvgAggregateInputType
    _sum?: PlaylistSongsSumAggregateInputType
    _min?: PlaylistSongsMinAggregateInputType
    _max?: PlaylistSongsMaxAggregateInputType
  }

  export type PlaylistSongsGroupByOutputType = {
    id: number
    playlist_id: number
    song_id: number
    _count: PlaylistSongsCountAggregateOutputType | null
    _avg: PlaylistSongsAvgAggregateOutputType | null
    _sum: PlaylistSongsSumAggregateOutputType | null
    _min: PlaylistSongsMinAggregateOutputType | null
    _max: PlaylistSongsMaxAggregateOutputType | null
  }

  type GetPlaylistSongsGroupByPayload<T extends PlaylistSongsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaylistSongsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistSongsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistSongsGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistSongsGroupByOutputType[P]>
        }
      >
    >


  export type PlaylistSongsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playlist_id?: boolean
    song_id?: boolean
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlistSongs"]>

  export type PlaylistSongsSelectScalar = {
    id?: boolean
    playlist_id?: boolean
    song_id?: boolean
  }

  export type PlaylistSongsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }


  export type $PlaylistSongsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "PlaylistSongs"
    objects: {
      playlist: Prisma.$PlaylistPayload<ExtArgs>
      song: Prisma.$SongPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      playlist_id: number
      song_id: number
    }, ExtArgs["result"]["playlistSongs"]>
    composites: {}
  }


  type PlaylistSongsGetPayload<S extends boolean | null | undefined | PlaylistSongsDefaultArgs> = $Result.GetResult<Prisma.$PlaylistSongsPayload, S>

  type PlaylistSongsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PlaylistSongsFindManyArgs, 'select' | 'include'> & {
      select?: PlaylistSongsCountAggregateInputType | true
    }

  export interface PlaylistSongsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlaylistSongs'], meta: { name: 'PlaylistSongs' } }
    /**
     * Find zero or one PlaylistSongs that matches the filter.
     * @param {PlaylistSongsFindUniqueArgs} args - Arguments to find a PlaylistSongs
     * @example
     * // Get one PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlaylistSongsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistSongsFindUniqueArgs<ExtArgs>>
    ): Prisma__PlaylistSongsClient<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PlaylistSongs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlaylistSongsFindUniqueOrThrowArgs} args - Arguments to find a PlaylistSongs
     * @example
     * // Get one PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlaylistSongsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistSongsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistSongsClient<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PlaylistSongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistSongsFindFirstArgs} args - Arguments to find a PlaylistSongs
     * @example
     * // Get one PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlaylistSongsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistSongsFindFirstArgs<ExtArgs>>
    ): Prisma__PlaylistSongsClient<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PlaylistSongs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistSongsFindFirstOrThrowArgs} args - Arguments to find a PlaylistSongs
     * @example
     * // Get one PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlaylistSongsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistSongsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistSongsClient<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PlaylistSongs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistSongsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.findMany()
     * 
     * // Get first 10 PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistSongsWithIdOnly = await prisma.playlistSongs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlaylistSongsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistSongsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PlaylistSongs.
     * @param {PlaylistSongsCreateArgs} args - Arguments to create a PlaylistSongs.
     * @example
     * // Create one PlaylistSongs
     * const PlaylistSongs = await prisma.playlistSongs.create({
     *   data: {
     *     // ... data to create a PlaylistSongs
     *   }
     * })
     * 
    **/
    create<T extends PlaylistSongsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistSongsCreateArgs<ExtArgs>>
    ): Prisma__PlaylistSongsClient<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PlaylistSongs.
     *     @param {PlaylistSongsCreateManyArgs} args - Arguments to create many PlaylistSongs.
     *     @example
     *     // Create many PlaylistSongs
     *     const playlistSongs = await prisma.playlistSongs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlaylistSongsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistSongsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlaylistSongs.
     * @param {PlaylistSongsDeleteArgs} args - Arguments to delete one PlaylistSongs.
     * @example
     * // Delete one PlaylistSongs
     * const PlaylistSongs = await prisma.playlistSongs.delete({
     *   where: {
     *     // ... filter to delete one PlaylistSongs
     *   }
     * })
     * 
    **/
    delete<T extends PlaylistSongsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistSongsDeleteArgs<ExtArgs>>
    ): Prisma__PlaylistSongsClient<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PlaylistSongs.
     * @param {PlaylistSongsUpdateArgs} args - Arguments to update one PlaylistSongs.
     * @example
     * // Update one PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlaylistSongsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistSongsUpdateArgs<ExtArgs>>
    ): Prisma__PlaylistSongsClient<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PlaylistSongs.
     * @param {PlaylistSongsDeleteManyArgs} args - Arguments to filter PlaylistSongs to delete.
     * @example
     * // Delete a few PlaylistSongs
     * const { count } = await prisma.playlistSongs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlaylistSongsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistSongsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlaylistSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistSongsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlaylistSongsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistSongsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlaylistSongs.
     * @param {PlaylistSongsUpsertArgs} args - Arguments to update or create a PlaylistSongs.
     * @example
     * // Update or create a PlaylistSongs
     * const playlistSongs = await prisma.playlistSongs.upsert({
     *   create: {
     *     // ... data to create a PlaylistSongs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlaylistSongs we want to update
     *   }
     * })
    **/
    upsert<T extends PlaylistSongsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistSongsUpsertArgs<ExtArgs>>
    ): Prisma__PlaylistSongsClient<$Result.GetResult<Prisma.$PlaylistSongsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PlaylistSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistSongsCountArgs} args - Arguments to filter PlaylistSongs to count.
     * @example
     * // Count the number of PlaylistSongs
     * const count = await prisma.playlistSongs.count({
     *   where: {
     *     // ... the filter for the PlaylistSongs we want to count
     *   }
     * })
    **/
    count<T extends PlaylistSongsCountArgs>(
      args?: Subset<T, PlaylistSongsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistSongsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlaylistSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistSongsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistSongsAggregateArgs>(args: Subset<T, PlaylistSongsAggregateArgs>): Prisma.PrismaPromise<GetPlaylistSongsAggregateType<T>>

    /**
     * Group by PlaylistSongs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistSongsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistSongsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistSongsGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistSongsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistSongsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistSongsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlaylistSongs model
   */
  readonly fields: PlaylistSongsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlaylistSongs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaylistSongsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    playlist<T extends PlaylistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaylistDefaultArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    song<T extends SongDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SongDefaultArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PlaylistSongs model
   */ 
  interface PlaylistSongsFieldRefs {
    readonly id: FieldRef<"PlaylistSongs", 'Int'>
    readonly playlist_id: FieldRef<"PlaylistSongs", 'Int'>
    readonly song_id: FieldRef<"PlaylistSongs", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * PlaylistSongs findUnique
   */
  export type PlaylistSongsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistSongs to fetch.
     */
    where: PlaylistSongsWhereUniqueInput
  }


  /**
   * PlaylistSongs findUniqueOrThrow
   */
  export type PlaylistSongsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistSongs to fetch.
     */
    where: PlaylistSongsWhereUniqueInput
  }


  /**
   * PlaylistSongs findFirst
   */
  export type PlaylistSongsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistSongs to fetch.
     */
    where?: PlaylistSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistSongs to fetch.
     */
    orderBy?: PlaylistSongsOrderByWithRelationInput | PlaylistSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlaylistSongs.
     */
    cursor?: PlaylistSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlaylistSongs.
     */
    distinct?: PlaylistSongsScalarFieldEnum | PlaylistSongsScalarFieldEnum[]
  }


  /**
   * PlaylistSongs findFirstOrThrow
   */
  export type PlaylistSongsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistSongs to fetch.
     */
    where?: PlaylistSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistSongs to fetch.
     */
    orderBy?: PlaylistSongsOrderByWithRelationInput | PlaylistSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlaylistSongs.
     */
    cursor?: PlaylistSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistSongs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlaylistSongs.
     */
    distinct?: PlaylistSongsScalarFieldEnum | PlaylistSongsScalarFieldEnum[]
  }


  /**
   * PlaylistSongs findMany
   */
  export type PlaylistSongsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistSongs to fetch.
     */
    where?: PlaylistSongsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistSongs to fetch.
     */
    orderBy?: PlaylistSongsOrderByWithRelationInput | PlaylistSongsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlaylistSongs.
     */
    cursor?: PlaylistSongsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistSongs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistSongs.
     */
    skip?: number
    distinct?: PlaylistSongsScalarFieldEnum | PlaylistSongsScalarFieldEnum[]
  }


  /**
   * PlaylistSongs create
   */
  export type PlaylistSongsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * The data needed to create a PlaylistSongs.
     */
    data: XOR<PlaylistSongsCreateInput, PlaylistSongsUncheckedCreateInput>
  }


  /**
   * PlaylistSongs createMany
   */
  export type PlaylistSongsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlaylistSongs.
     */
    data: PlaylistSongsCreateManyInput | PlaylistSongsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PlaylistSongs update
   */
  export type PlaylistSongsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * The data needed to update a PlaylistSongs.
     */
    data: XOR<PlaylistSongsUpdateInput, PlaylistSongsUncheckedUpdateInput>
    /**
     * Choose, which PlaylistSongs to update.
     */
    where: PlaylistSongsWhereUniqueInput
  }


  /**
   * PlaylistSongs updateMany
   */
  export type PlaylistSongsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlaylistSongs.
     */
    data: XOR<PlaylistSongsUpdateManyMutationInput, PlaylistSongsUncheckedUpdateManyInput>
    /**
     * Filter which PlaylistSongs to update
     */
    where?: PlaylistSongsWhereInput
  }


  /**
   * PlaylistSongs upsert
   */
  export type PlaylistSongsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * The filter to search for the PlaylistSongs to update in case it exists.
     */
    where: PlaylistSongsWhereUniqueInput
    /**
     * In case the PlaylistSongs found by the `where` argument doesn't exist, create a new PlaylistSongs with this data.
     */
    create: XOR<PlaylistSongsCreateInput, PlaylistSongsUncheckedCreateInput>
    /**
     * In case the PlaylistSongs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaylistSongsUpdateInput, PlaylistSongsUncheckedUpdateInput>
  }


  /**
   * PlaylistSongs delete
   */
  export type PlaylistSongsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
    /**
     * Filter which PlaylistSongs to delete.
     */
    where: PlaylistSongsWhereUniqueInput
  }


  /**
   * PlaylistSongs deleteMany
   */
  export type PlaylistSongsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlaylistSongs to delete
     */
    where?: PlaylistSongsWhereInput
  }


  /**
   * PlaylistSongs without action
   */
  export type PlaylistSongsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistSongs
     */
    select?: PlaylistSongsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistSongsInclude<ExtArgs> | null
  }



  /**
   * Model EmailAuth
   */

  export type AggregateEmailAuth = {
    _count: EmailAuthCountAggregateOutputType | null
    _avg: EmailAuthAvgAggregateOutputType | null
    _sum: EmailAuthSumAggregateOutputType | null
    _min: EmailAuthMinAggregateOutputType | null
    _max: EmailAuthMaxAggregateOutputType | null
  }

  export type EmailAuthAvgAggregateOutputType = {
    id: number | null
  }

  export type EmailAuthSumAggregateOutputType = {
    id: number | null
  }

  export type EmailAuthMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    is_auth: boolean | null
  }

  export type EmailAuthMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    is_auth: boolean | null
  }

  export type EmailAuthCountAggregateOutputType = {
    id: number
    user_id: number
    is_auth: number
    _all: number
  }


  export type EmailAuthAvgAggregateInputType = {
    id?: true
  }

  export type EmailAuthSumAggregateInputType = {
    id?: true
  }

  export type EmailAuthMinAggregateInputType = {
    id?: true
    user_id?: true
    is_auth?: true
  }

  export type EmailAuthMaxAggregateInputType = {
    id?: true
    user_id?: true
    is_auth?: true
  }

  export type EmailAuthCountAggregateInputType = {
    id?: true
    user_id?: true
    is_auth?: true
    _all?: true
  }

  export type EmailAuthAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailAuth to aggregate.
     */
    where?: EmailAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAuths to fetch.
     */
    orderBy?: EmailAuthOrderByWithRelationInput | EmailAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailAuths
    **/
    _count?: true | EmailAuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailAuthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailAuthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailAuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailAuthMaxAggregateInputType
  }

  export type GetEmailAuthAggregateType<T extends EmailAuthAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailAuth[P]>
      : GetScalarType<T[P], AggregateEmailAuth[P]>
  }




  export type EmailAuthGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmailAuthWhereInput
    orderBy?: EmailAuthOrderByWithAggregationInput | EmailAuthOrderByWithAggregationInput[]
    by: EmailAuthScalarFieldEnum[] | EmailAuthScalarFieldEnum
    having?: EmailAuthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailAuthCountAggregateInputType | true
    _avg?: EmailAuthAvgAggregateInputType
    _sum?: EmailAuthSumAggregateInputType
    _min?: EmailAuthMinAggregateInputType
    _max?: EmailAuthMaxAggregateInputType
  }

  export type EmailAuthGroupByOutputType = {
    id: number
    user_id: string
    is_auth: boolean
    _count: EmailAuthCountAggregateOutputType | null
    _avg: EmailAuthAvgAggregateOutputType | null
    _sum: EmailAuthSumAggregateOutputType | null
    _min: EmailAuthMinAggregateOutputType | null
    _max: EmailAuthMaxAggregateOutputType | null
  }

  type GetEmailAuthGroupByPayload<T extends EmailAuthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailAuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailAuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailAuthGroupByOutputType[P]>
            : GetScalarType<T[P], EmailAuthGroupByOutputType[P]>
        }
      >
    >


  export type EmailAuthSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    is_auth?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailAuth"]>

  export type EmailAuthSelectScalar = {
    id?: boolean
    user_id?: boolean
    is_auth?: boolean
  }

  export type EmailAuthInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $EmailAuthPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "EmailAuth"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      user_id: string
      is_auth: boolean
    }, ExtArgs["result"]["emailAuth"]>
    composites: {}
  }


  type EmailAuthGetPayload<S extends boolean | null | undefined | EmailAuthDefaultArgs> = $Result.GetResult<Prisma.$EmailAuthPayload, S>

  type EmailAuthCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EmailAuthFindManyArgs, 'select' | 'include'> & {
      select?: EmailAuthCountAggregateInputType | true
    }

  export interface EmailAuthDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailAuth'], meta: { name: 'EmailAuth' } }
    /**
     * Find zero or one EmailAuth that matches the filter.
     * @param {EmailAuthFindUniqueArgs} args - Arguments to find a EmailAuth
     * @example
     * // Get one EmailAuth
     * const emailAuth = await prisma.emailAuth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmailAuthFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmailAuthFindUniqueArgs<ExtArgs>>
    ): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EmailAuth that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmailAuthFindUniqueOrThrowArgs} args - Arguments to find a EmailAuth
     * @example
     * // Get one EmailAuth
     * const emailAuth = await prisma.emailAuth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmailAuthFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailAuthFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EmailAuth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAuthFindFirstArgs} args - Arguments to find a EmailAuth
     * @example
     * // Get one EmailAuth
     * const emailAuth = await prisma.emailAuth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmailAuthFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailAuthFindFirstArgs<ExtArgs>>
    ): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EmailAuth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAuthFindFirstOrThrowArgs} args - Arguments to find a EmailAuth
     * @example
     * // Get one EmailAuth
     * const emailAuth = await prisma.emailAuth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmailAuthFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailAuthFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EmailAuths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAuthFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailAuths
     * const emailAuths = await prisma.emailAuth.findMany()
     * 
     * // Get first 10 EmailAuths
     * const emailAuths = await prisma.emailAuth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailAuthWithIdOnly = await prisma.emailAuth.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmailAuthFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailAuthFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EmailAuth.
     * @param {EmailAuthCreateArgs} args - Arguments to create a EmailAuth.
     * @example
     * // Create one EmailAuth
     * const EmailAuth = await prisma.emailAuth.create({
     *   data: {
     *     // ... data to create a EmailAuth
     *   }
     * })
     * 
    **/
    create<T extends EmailAuthCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailAuthCreateArgs<ExtArgs>>
    ): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EmailAuths.
     *     @param {EmailAuthCreateManyArgs} args - Arguments to create many EmailAuths.
     *     @example
     *     // Create many EmailAuths
     *     const emailAuth = await prisma.emailAuth.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmailAuthCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailAuthCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmailAuth.
     * @param {EmailAuthDeleteArgs} args - Arguments to delete one EmailAuth.
     * @example
     * // Delete one EmailAuth
     * const EmailAuth = await prisma.emailAuth.delete({
     *   where: {
     *     // ... filter to delete one EmailAuth
     *   }
     * })
     * 
    **/
    delete<T extends EmailAuthDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmailAuthDeleteArgs<ExtArgs>>
    ): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EmailAuth.
     * @param {EmailAuthUpdateArgs} args - Arguments to update one EmailAuth.
     * @example
     * // Update one EmailAuth
     * const emailAuth = await prisma.emailAuth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmailAuthUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailAuthUpdateArgs<ExtArgs>>
    ): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EmailAuths.
     * @param {EmailAuthDeleteManyArgs} args - Arguments to filter EmailAuths to delete.
     * @example
     * // Delete a few EmailAuths
     * const { count } = await prisma.emailAuth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmailAuthDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailAuthDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAuthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailAuths
     * const emailAuth = await prisma.emailAuth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmailAuthUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmailAuthUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailAuth.
     * @param {EmailAuthUpsertArgs} args - Arguments to update or create a EmailAuth.
     * @example
     * // Update or create a EmailAuth
     * const emailAuth = await prisma.emailAuth.upsert({
     *   create: {
     *     // ... data to create a EmailAuth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailAuth we want to update
     *   }
     * })
    **/
    upsert<T extends EmailAuthUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmailAuthUpsertArgs<ExtArgs>>
    ): Prisma__EmailAuthClient<$Result.GetResult<Prisma.$EmailAuthPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EmailAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAuthCountArgs} args - Arguments to filter EmailAuths to count.
     * @example
     * // Count the number of EmailAuths
     * const count = await prisma.emailAuth.count({
     *   where: {
     *     // ... the filter for the EmailAuths we want to count
     *   }
     * })
    **/
    count<T extends EmailAuthCountArgs>(
      args?: Subset<T, EmailAuthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailAuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailAuthAggregateArgs>(args: Subset<T, EmailAuthAggregateArgs>): Prisma.PrismaPromise<GetEmailAuthAggregateType<T>>

    /**
     * Group by EmailAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAuthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailAuthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailAuthGroupByArgs['orderBy'] }
        : { orderBy?: EmailAuthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailAuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailAuth model
   */
  readonly fields: EmailAuthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailAuth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailAuthClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EmailAuth model
   */ 
  interface EmailAuthFieldRefs {
    readonly id: FieldRef<"EmailAuth", 'Int'>
    readonly user_id: FieldRef<"EmailAuth", 'String'>
    readonly is_auth: FieldRef<"EmailAuth", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * EmailAuth findUnique
   */
  export type EmailAuthFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * Filter, which EmailAuth to fetch.
     */
    where: EmailAuthWhereUniqueInput
  }


  /**
   * EmailAuth findUniqueOrThrow
   */
  export type EmailAuthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * Filter, which EmailAuth to fetch.
     */
    where: EmailAuthWhereUniqueInput
  }


  /**
   * EmailAuth findFirst
   */
  export type EmailAuthFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * Filter, which EmailAuth to fetch.
     */
    where?: EmailAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAuths to fetch.
     */
    orderBy?: EmailAuthOrderByWithRelationInput | EmailAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailAuths.
     */
    cursor?: EmailAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailAuths.
     */
    distinct?: EmailAuthScalarFieldEnum | EmailAuthScalarFieldEnum[]
  }


  /**
   * EmailAuth findFirstOrThrow
   */
  export type EmailAuthFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * Filter, which EmailAuth to fetch.
     */
    where?: EmailAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAuths to fetch.
     */
    orderBy?: EmailAuthOrderByWithRelationInput | EmailAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailAuths.
     */
    cursor?: EmailAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailAuths.
     */
    distinct?: EmailAuthScalarFieldEnum | EmailAuthScalarFieldEnum[]
  }


  /**
   * EmailAuth findMany
   */
  export type EmailAuthFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * Filter, which EmailAuths to fetch.
     */
    where?: EmailAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAuths to fetch.
     */
    orderBy?: EmailAuthOrderByWithRelationInput | EmailAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailAuths.
     */
    cursor?: EmailAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAuths.
     */
    skip?: number
    distinct?: EmailAuthScalarFieldEnum | EmailAuthScalarFieldEnum[]
  }


  /**
   * EmailAuth create
   */
  export type EmailAuthCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailAuth.
     */
    data: XOR<EmailAuthCreateInput, EmailAuthUncheckedCreateInput>
  }


  /**
   * EmailAuth createMany
   */
  export type EmailAuthCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailAuths.
     */
    data: EmailAuthCreateManyInput | EmailAuthCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EmailAuth update
   */
  export type EmailAuthUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailAuth.
     */
    data: XOR<EmailAuthUpdateInput, EmailAuthUncheckedUpdateInput>
    /**
     * Choose, which EmailAuth to update.
     */
    where: EmailAuthWhereUniqueInput
  }


  /**
   * EmailAuth updateMany
   */
  export type EmailAuthUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailAuths.
     */
    data: XOR<EmailAuthUpdateManyMutationInput, EmailAuthUncheckedUpdateManyInput>
    /**
     * Filter which EmailAuths to update
     */
    where?: EmailAuthWhereInput
  }


  /**
   * EmailAuth upsert
   */
  export type EmailAuthUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailAuth to update in case it exists.
     */
    where: EmailAuthWhereUniqueInput
    /**
     * In case the EmailAuth found by the `where` argument doesn't exist, create a new EmailAuth with this data.
     */
    create: XOR<EmailAuthCreateInput, EmailAuthUncheckedCreateInput>
    /**
     * In case the EmailAuth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailAuthUpdateInput, EmailAuthUncheckedUpdateInput>
  }


  /**
   * EmailAuth delete
   */
  export type EmailAuthDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
    /**
     * Filter which EmailAuth to delete.
     */
    where: EmailAuthWhereUniqueInput
  }


  /**
   * EmailAuth deleteMany
   */
  export type EmailAuthDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailAuths to delete
     */
    where?: EmailAuthWhereInput
  }


  /**
   * EmailAuth without action
   */
  export type EmailAuthDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAuth
     */
    select?: EmailAuthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailAuthInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SongScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    audio: 'audio',
    artist: 'artist'
  };

  export type SongScalarFieldEnum = (typeof SongScalarFieldEnum)[keyof typeof SongScalarFieldEnum]


  export const AlbumScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    author: 'author'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const FavoriteScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    song_id: 'song_id'
  };

  export type FavoriteScalarFieldEnum = (typeof FavoriteScalarFieldEnum)[keyof typeof FavoriteScalarFieldEnum]


  export const PlaylistScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    user_id: 'user_id'
  };

  export type PlaylistScalarFieldEnum = (typeof PlaylistScalarFieldEnum)[keyof typeof PlaylistScalarFieldEnum]


  export const AlbumSongsScalarFieldEnum: {
    id: 'id',
    album_id: 'album_id',
    song_id: 'song_id'
  };

  export type AlbumSongsScalarFieldEnum = (typeof AlbumSongsScalarFieldEnum)[keyof typeof AlbumSongsScalarFieldEnum]


  export const PlaylistSongsScalarFieldEnum: {
    id: 'id',
    playlist_id: 'playlist_id',
    song_id: 'song_id'
  };

  export type PlaylistSongsScalarFieldEnum = (typeof PlaylistSongsScalarFieldEnum)[keyof typeof PlaylistSongsScalarFieldEnum]


  export const EmailAuthScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    is_auth: 'is_auth'
  };

  export type EmailAuthScalarFieldEnum = (typeof EmailAuthScalarFieldEnum)[keyof typeof EmailAuthScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringNullableListFilter<"User">
    fovorite?: FavoriteListRelationFilter
    playlist?: PlaylistListRelationFilter
    email_auth?: XOR<EmailAuthNullableRelationFilter, EmailAuthWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fovorite?: FavoriteOrderByRelationAggregateInput
    playlist?: PlaylistOrderByRelationAggregateInput
    email_auth?: EmailAuthOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringNullableListFilter<"User">
    fovorite?: FavoriteListRelationFilter
    playlist?: PlaylistListRelationFilter
    email_auth?: XOR<EmailAuthNullableRelationFilter, EmailAuthWhereInput> | null
  }, "id" | "name" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringNullableListFilter<"User">
  }

  export type SongWhereInput = {
    AND?: SongWhereInput | SongWhereInput[]
    OR?: SongWhereInput[]
    NOT?: SongWhereInput | SongWhereInput[]
    id?: IntFilter<"Song"> | number
    name?: StringFilter<"Song"> | string
    description?: StringNullableFilter<"Song"> | string | null
    audio?: StringFilter<"Song"> | string
    artist?: StringFilter<"Song"> | string
    favorite?: FavoriteListRelationFilter
    playlist_songs?: PlaylistSongsListRelationFilter
    album_songs?: AlbumSongsListRelationFilter
  }

  export type SongOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    audio?: SortOrder
    artist?: SortOrder
    favorite?: FavoriteOrderByRelationAggregateInput
    playlist_songs?: PlaylistSongsOrderByRelationAggregateInput
    album_songs?: AlbumSongsOrderByRelationAggregateInput
  }

  export type SongWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    audio?: string
    AND?: SongWhereInput | SongWhereInput[]
    OR?: SongWhereInput[]
    NOT?: SongWhereInput | SongWhereInput[]
    description?: StringNullableFilter<"Song"> | string | null
    artist?: StringFilter<"Song"> | string
    favorite?: FavoriteListRelationFilter
    playlist_songs?: PlaylistSongsListRelationFilter
    album_songs?: AlbumSongsListRelationFilter
  }, "id" | "name" | "audio">

  export type SongOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    audio?: SortOrder
    artist?: SortOrder
    _count?: SongCountOrderByAggregateInput
    _avg?: SongAvgOrderByAggregateInput
    _max?: SongMaxOrderByAggregateInput
    _min?: SongMinOrderByAggregateInput
    _sum?: SongSumOrderByAggregateInput
  }

  export type SongScalarWhereWithAggregatesInput = {
    AND?: SongScalarWhereWithAggregatesInput | SongScalarWhereWithAggregatesInput[]
    OR?: SongScalarWhereWithAggregatesInput[]
    NOT?: SongScalarWhereWithAggregatesInput | SongScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Song"> | number
    name?: StringWithAggregatesFilter<"Song"> | string
    description?: StringNullableWithAggregatesFilter<"Song"> | string | null
    audio?: StringWithAggregatesFilter<"Song"> | string
    artist?: StringWithAggregatesFilter<"Song"> | string
  }

  export type AlbumWhereInput = {
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    id?: IntFilter<"Album"> | number
    title?: StringFilter<"Album"> | string
    description?: StringFilter<"Album"> | string
    author?: StringFilter<"Album"> | string
    album_songs?: AlbumSongsListRelationFilter
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author?: SortOrder
    album_songs?: AlbumSongsOrderByRelationAggregateInput
  }

  export type AlbumWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    title?: StringFilter<"Album"> | string
    description?: StringFilter<"Album"> | string
    author?: StringFilter<"Album"> | string
    album_songs?: AlbumSongsListRelationFilter
  }, "id">

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author?: SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _avg?: AlbumAvgOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
    _sum?: AlbumSumOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    OR?: AlbumScalarWhereWithAggregatesInput[]
    NOT?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Album"> | number
    title?: StringWithAggregatesFilter<"Album"> | string
    description?: StringWithAggregatesFilter<"Album"> | string
    author?: StringWithAggregatesFilter<"Album"> | string
  }

  export type FavoriteWhereInput = {
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    id?: IntFilter<"Favorite"> | number
    user_id?: StringFilter<"Favorite"> | string
    song_id?: IntFilter<"Favorite"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    song?: XOR<SongRelationFilter, SongWhereInput>
  }

  export type FavoriteOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    song_id?: SortOrder
    user?: UserOrderByWithRelationInput
    song?: SongOrderByWithRelationInput
  }

  export type FavoriteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    user_id?: StringFilter<"Favorite"> | string
    song_id?: IntFilter<"Favorite"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    song?: XOR<SongRelationFilter, SongWhereInput>
  }, "id">

  export type FavoriteOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    song_id?: SortOrder
    _count?: FavoriteCountOrderByAggregateInput
    _avg?: FavoriteAvgOrderByAggregateInput
    _max?: FavoriteMaxOrderByAggregateInput
    _min?: FavoriteMinOrderByAggregateInput
    _sum?: FavoriteSumOrderByAggregateInput
  }

  export type FavoriteScalarWhereWithAggregatesInput = {
    AND?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    OR?: FavoriteScalarWhereWithAggregatesInput[]
    NOT?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Favorite"> | number
    user_id?: StringWithAggregatesFilter<"Favorite"> | string
    song_id?: IntWithAggregatesFilter<"Favorite"> | number
  }

  export type PlaylistWhereInput = {
    AND?: PlaylistWhereInput | PlaylistWhereInput[]
    OR?: PlaylistWhereInput[]
    NOT?: PlaylistWhereInput | PlaylistWhereInput[]
    id?: IntFilter<"Playlist"> | number
    title?: StringFilter<"Playlist"> | string
    description?: StringFilter<"Playlist"> | string
    user_id?: StringFilter<"Playlist"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    playlist_songs?: PlaylistSongsListRelationFilter
  }

  export type PlaylistOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
    playlist_songs?: PlaylistSongsOrderByRelationAggregateInput
  }

  export type PlaylistWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlaylistWhereInput | PlaylistWhereInput[]
    OR?: PlaylistWhereInput[]
    NOT?: PlaylistWhereInput | PlaylistWhereInput[]
    title?: StringFilter<"Playlist"> | string
    description?: StringFilter<"Playlist"> | string
    user_id?: StringFilter<"Playlist"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    playlist_songs?: PlaylistSongsListRelationFilter
  }, "id">

  export type PlaylistOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
    _count?: PlaylistCountOrderByAggregateInput
    _avg?: PlaylistAvgOrderByAggregateInput
    _max?: PlaylistMaxOrderByAggregateInput
    _min?: PlaylistMinOrderByAggregateInput
    _sum?: PlaylistSumOrderByAggregateInput
  }

  export type PlaylistScalarWhereWithAggregatesInput = {
    AND?: PlaylistScalarWhereWithAggregatesInput | PlaylistScalarWhereWithAggregatesInput[]
    OR?: PlaylistScalarWhereWithAggregatesInput[]
    NOT?: PlaylistScalarWhereWithAggregatesInput | PlaylistScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Playlist"> | number
    title?: StringWithAggregatesFilter<"Playlist"> | string
    description?: StringWithAggregatesFilter<"Playlist"> | string
    user_id?: StringWithAggregatesFilter<"Playlist"> | string
  }

  export type AlbumSongsWhereInput = {
    AND?: AlbumSongsWhereInput | AlbumSongsWhereInput[]
    OR?: AlbumSongsWhereInput[]
    NOT?: AlbumSongsWhereInput | AlbumSongsWhereInput[]
    id?: IntFilter<"AlbumSongs"> | number
    album_id?: IntFilter<"AlbumSongs"> | number
    song_id?: IntFilter<"AlbumSongs"> | number
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
    song?: XOR<SongRelationFilter, SongWhereInput>
  }

  export type AlbumSongsOrderByWithRelationInput = {
    id?: SortOrder
    album_id?: SortOrder
    song_id?: SortOrder
    album?: AlbumOrderByWithRelationInput
    song?: SongOrderByWithRelationInput
  }

  export type AlbumSongsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlbumSongsWhereInput | AlbumSongsWhereInput[]
    OR?: AlbumSongsWhereInput[]
    NOT?: AlbumSongsWhereInput | AlbumSongsWhereInput[]
    album_id?: IntFilter<"AlbumSongs"> | number
    song_id?: IntFilter<"AlbumSongs"> | number
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
    song?: XOR<SongRelationFilter, SongWhereInput>
  }, "id">

  export type AlbumSongsOrderByWithAggregationInput = {
    id?: SortOrder
    album_id?: SortOrder
    song_id?: SortOrder
    _count?: AlbumSongsCountOrderByAggregateInput
    _avg?: AlbumSongsAvgOrderByAggregateInput
    _max?: AlbumSongsMaxOrderByAggregateInput
    _min?: AlbumSongsMinOrderByAggregateInput
    _sum?: AlbumSongsSumOrderByAggregateInput
  }

  export type AlbumSongsScalarWhereWithAggregatesInput = {
    AND?: AlbumSongsScalarWhereWithAggregatesInput | AlbumSongsScalarWhereWithAggregatesInput[]
    OR?: AlbumSongsScalarWhereWithAggregatesInput[]
    NOT?: AlbumSongsScalarWhereWithAggregatesInput | AlbumSongsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AlbumSongs"> | number
    album_id?: IntWithAggregatesFilter<"AlbumSongs"> | number
    song_id?: IntWithAggregatesFilter<"AlbumSongs"> | number
  }

  export type PlaylistSongsWhereInput = {
    AND?: PlaylistSongsWhereInput | PlaylistSongsWhereInput[]
    OR?: PlaylistSongsWhereInput[]
    NOT?: PlaylistSongsWhereInput | PlaylistSongsWhereInput[]
    id?: IntFilter<"PlaylistSongs"> | number
    playlist_id?: IntFilter<"PlaylistSongs"> | number
    song_id?: IntFilter<"PlaylistSongs"> | number
    playlist?: XOR<PlaylistRelationFilter, PlaylistWhereInput>
    song?: XOR<SongRelationFilter, SongWhereInput>
  }

  export type PlaylistSongsOrderByWithRelationInput = {
    id?: SortOrder
    playlist_id?: SortOrder
    song_id?: SortOrder
    playlist?: PlaylistOrderByWithRelationInput
    song?: SongOrderByWithRelationInput
  }

  export type PlaylistSongsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlaylistSongsWhereInput | PlaylistSongsWhereInput[]
    OR?: PlaylistSongsWhereInput[]
    NOT?: PlaylistSongsWhereInput | PlaylistSongsWhereInput[]
    playlist_id?: IntFilter<"PlaylistSongs"> | number
    song_id?: IntFilter<"PlaylistSongs"> | number
    playlist?: XOR<PlaylistRelationFilter, PlaylistWhereInput>
    song?: XOR<SongRelationFilter, SongWhereInput>
  }, "id">

  export type PlaylistSongsOrderByWithAggregationInput = {
    id?: SortOrder
    playlist_id?: SortOrder
    song_id?: SortOrder
    _count?: PlaylistSongsCountOrderByAggregateInput
    _avg?: PlaylistSongsAvgOrderByAggregateInput
    _max?: PlaylistSongsMaxOrderByAggregateInput
    _min?: PlaylistSongsMinOrderByAggregateInput
    _sum?: PlaylistSongsSumOrderByAggregateInput
  }

  export type PlaylistSongsScalarWhereWithAggregatesInput = {
    AND?: PlaylistSongsScalarWhereWithAggregatesInput | PlaylistSongsScalarWhereWithAggregatesInput[]
    OR?: PlaylistSongsScalarWhereWithAggregatesInput[]
    NOT?: PlaylistSongsScalarWhereWithAggregatesInput | PlaylistSongsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlaylistSongs"> | number
    playlist_id?: IntWithAggregatesFilter<"PlaylistSongs"> | number
    song_id?: IntWithAggregatesFilter<"PlaylistSongs"> | number
  }

  export type EmailAuthWhereInput = {
    AND?: EmailAuthWhereInput | EmailAuthWhereInput[]
    OR?: EmailAuthWhereInput[]
    NOT?: EmailAuthWhereInput | EmailAuthWhereInput[]
    id?: IntFilter<"EmailAuth"> | number
    user_id?: StringFilter<"EmailAuth"> | string
    is_auth?: BoolFilter<"EmailAuth"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EmailAuthOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_auth?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EmailAuthWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: string
    AND?: EmailAuthWhereInput | EmailAuthWhereInput[]
    OR?: EmailAuthWhereInput[]
    NOT?: EmailAuthWhereInput | EmailAuthWhereInput[]
    is_auth?: BoolFilter<"EmailAuth"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type EmailAuthOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_auth?: SortOrder
    _count?: EmailAuthCountOrderByAggregateInput
    _avg?: EmailAuthAvgOrderByAggregateInput
    _max?: EmailAuthMaxOrderByAggregateInput
    _min?: EmailAuthMinOrderByAggregateInput
    _sum?: EmailAuthSumOrderByAggregateInput
  }

  export type EmailAuthScalarWhereWithAggregatesInput = {
    AND?: EmailAuthScalarWhereWithAggregatesInput | EmailAuthScalarWhereWithAggregatesInput[]
    OR?: EmailAuthScalarWhereWithAggregatesInput[]
    NOT?: EmailAuthScalarWhereWithAggregatesInput | EmailAuthScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmailAuth"> | number
    user_id?: StringWithAggregatesFilter<"EmailAuth"> | string
    is_auth?: BoolWithAggregatesFilter<"EmailAuth"> | boolean
  }

  export type UserCreateInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
    fovorite?: FavoriteCreateNestedManyWithoutUserInput
    playlist?: PlaylistCreateNestedManyWithoutUserInput
    email_auth?: EmailAuthCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
    fovorite?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    email_auth?: EmailAuthUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
    fovorite?: FavoriteUpdateManyWithoutUserNestedInput
    playlist?: PlaylistUpdateManyWithoutUserNestedInput
    email_auth?: EmailAuthUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
    fovorite?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    email_auth?: EmailAuthUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
  }

  export type SongCreateInput = {
    name: string
    description?: string | null
    audio: string
    artist: string
    favorite?: FavoriteCreateNestedManyWithoutSongInput
    playlist_songs?: PlaylistSongsCreateNestedManyWithoutSongInput
    album_songs?: AlbumSongsCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    audio: string
    artist: string
    favorite?: FavoriteUncheckedCreateNestedManyWithoutSongInput
    playlist_songs?: PlaylistSongsUncheckedCreateNestedManyWithoutSongInput
    album_songs?: AlbumSongsUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    favorite?: FavoriteUpdateManyWithoutSongNestedInput
    playlist_songs?: PlaylistSongsUpdateManyWithoutSongNestedInput
    album_songs?: AlbumSongsUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    favorite?: FavoriteUncheckedUpdateManyWithoutSongNestedInput
    playlist_songs?: PlaylistSongsUncheckedUpdateManyWithoutSongNestedInput
    album_songs?: AlbumSongsUncheckedUpdateManyWithoutSongNestedInput
  }

  export type SongCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    audio: string
    artist: string
  }

  export type SongUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
  }

  export type SongUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumCreateInput = {
    title: string
    description: string
    author: string
    album_songs?: AlbumSongsCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    author: string
    album_songs?: AlbumSongsUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    album_songs?: AlbumSongsUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    album_songs?: AlbumSongsUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyInput = {
    id?: number
    title: string
    description: string
    author: string
  }

  export type AlbumUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteCreateInput = {
    user: UserCreateNestedOneWithoutFovoriteInput
    song: SongCreateNestedOneWithoutFavoriteInput
  }

  export type FavoriteUncheckedCreateInput = {
    id?: number
    user_id: string
    song_id: number
  }

  export type FavoriteUpdateInput = {
    user?: UserUpdateOneRequiredWithoutFovoriteNestedInput
    song?: SongUpdateOneRequiredWithoutFavoriteNestedInput
  }

  export type FavoriteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteCreateManyInput = {
    id?: number
    user_id: string
    song_id: number
  }

  export type FavoriteUpdateManyMutationInput = {

  }

  export type FavoriteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlaylistCreateInput = {
    title: string
    description: string
    user: UserCreateNestedOneWithoutPlaylistInput
    playlist_songs?: PlaylistSongsCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    user_id: string
    playlist_songs?: PlaylistSongsUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPlaylistNestedInput
    playlist_songs?: PlaylistSongsUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    playlist_songs?: PlaylistSongsUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistCreateManyInput = {
    id?: number
    title: string
    description: string
    user_id: string
  }

  export type PlaylistUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PlaylistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumSongsCreateInput = {
    album: AlbumCreateNestedOneWithoutAlbum_songsInput
    song: SongCreateNestedOneWithoutAlbum_songsInput
  }

  export type AlbumSongsUncheckedCreateInput = {
    id?: number
    album_id: number
    song_id: number
  }

  export type AlbumSongsUpdateInput = {
    album?: AlbumUpdateOneRequiredWithoutAlbum_songsNestedInput
    song?: SongUpdateOneRequiredWithoutAlbum_songsNestedInput
  }

  export type AlbumSongsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    album_id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumSongsCreateManyInput = {
    id?: number
    album_id: number
    song_id: number
  }

  export type AlbumSongsUpdateManyMutationInput = {

  }

  export type AlbumSongsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    album_id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlaylistSongsCreateInput = {
    playlist: PlaylistCreateNestedOneWithoutPlaylist_songsInput
    song: SongCreateNestedOneWithoutPlaylist_songsInput
  }

  export type PlaylistSongsUncheckedCreateInput = {
    id?: number
    playlist_id: number
    song_id: number
  }

  export type PlaylistSongsUpdateInput = {
    playlist?: PlaylistUpdateOneRequiredWithoutPlaylist_songsNestedInput
    song?: SongUpdateOneRequiredWithoutPlaylist_songsNestedInput
  }

  export type PlaylistSongsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlist_id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlaylistSongsCreateManyInput = {
    id?: number
    playlist_id: number
    song_id: number
  }

  export type PlaylistSongsUpdateManyMutationInput = {

  }

  export type PlaylistSongsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlist_id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type EmailAuthCreateInput = {
    is_auth: boolean
    user: UserCreateNestedOneWithoutEmail_authInput
  }

  export type EmailAuthUncheckedCreateInput = {
    id?: number
    user_id: string
    is_auth: boolean
  }

  export type EmailAuthUpdateInput = {
    is_auth?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutEmail_authNestedInput
  }

  export type EmailAuthUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    is_auth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailAuthCreateManyInput = {
    id?: number
    user_id: string
    is_auth: boolean
  }

  export type EmailAuthUpdateManyMutationInput = {
    is_auth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailAuthUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    is_auth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FavoriteListRelationFilter = {
    every?: FavoriteWhereInput
    some?: FavoriteWhereInput
    none?: FavoriteWhereInput
  }

  export type PlaylistListRelationFilter = {
    every?: PlaylistWhereInput
    some?: PlaylistWhereInput
    none?: PlaylistWhereInput
  }

  export type EmailAuthNullableRelationFilter = {
    is?: EmailAuthWhereInput | null
    isNot?: EmailAuthWhereInput | null
  }

  export type FavoriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaylistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PlaylistSongsListRelationFilter = {
    every?: PlaylistSongsWhereInput
    some?: PlaylistSongsWhereInput
    none?: PlaylistSongsWhereInput
  }

  export type AlbumSongsListRelationFilter = {
    every?: AlbumSongsWhereInput
    some?: AlbumSongsWhereInput
    none?: AlbumSongsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PlaylistSongsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumSongsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SongCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    audio?: SortOrder
    artist?: SortOrder
  }

  export type SongAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SongMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    audio?: SortOrder
    artist?: SortOrder
  }

  export type SongMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    audio?: SortOrder
    artist?: SortOrder
  }

  export type SongSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author?: SortOrder
  }

  export type AlbumAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author?: SortOrder
  }

  export type AlbumSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SongRelationFilter = {
    is?: SongWhereInput
    isNot?: SongWhereInput
  }

  export type FavoriteCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    song_id?: SortOrder
  }

  export type FavoriteAvgOrderByAggregateInput = {
    id?: SortOrder
    song_id?: SortOrder
  }

  export type FavoriteMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    song_id?: SortOrder
  }

  export type FavoriteMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    song_id?: SortOrder
  }

  export type FavoriteSumOrderByAggregateInput = {
    id?: SortOrder
    song_id?: SortOrder
  }

  export type PlaylistCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
  }

  export type PlaylistAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlaylistMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
  }

  export type PlaylistMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
  }

  export type PlaylistSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlbumRelationFilter = {
    is?: AlbumWhereInput
    isNot?: AlbumWhereInput
  }

  export type AlbumSongsCountOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    song_id?: SortOrder
  }

  export type AlbumSongsAvgOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    song_id?: SortOrder
  }

  export type AlbumSongsMaxOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    song_id?: SortOrder
  }

  export type AlbumSongsMinOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    song_id?: SortOrder
  }

  export type AlbumSongsSumOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    song_id?: SortOrder
  }

  export type PlaylistRelationFilter = {
    is?: PlaylistWhereInput
    isNot?: PlaylistWhereInput
  }

  export type PlaylistSongsCountOrderByAggregateInput = {
    id?: SortOrder
    playlist_id?: SortOrder
    song_id?: SortOrder
  }

  export type PlaylistSongsAvgOrderByAggregateInput = {
    id?: SortOrder
    playlist_id?: SortOrder
    song_id?: SortOrder
  }

  export type PlaylistSongsMaxOrderByAggregateInput = {
    id?: SortOrder
    playlist_id?: SortOrder
    song_id?: SortOrder
  }

  export type PlaylistSongsMinOrderByAggregateInput = {
    id?: SortOrder
    playlist_id?: SortOrder
    song_id?: SortOrder
  }

  export type PlaylistSongsSumOrderByAggregateInput = {
    id?: SortOrder
    playlist_id?: SortOrder
    song_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EmailAuthCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_auth?: SortOrder
  }

  export type EmailAuthAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmailAuthMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_auth?: SortOrder
  }

  export type EmailAuthMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_auth?: SortOrder
  }

  export type EmailAuthSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserCreateroleInput = {
    set: string[]
  }

  export type FavoriteCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type PlaylistCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type EmailAuthCreateNestedOneWithoutUserInput = {
    create?: XOR<EmailAuthCreateWithoutUserInput, EmailAuthUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmailAuthCreateOrConnectWithoutUserInput
    connect?: EmailAuthWhereUniqueInput
  }

  export type FavoriteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type PlaylistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type EmailAuthUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmailAuthCreateWithoutUserInput, EmailAuthUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmailAuthCreateOrConnectWithoutUserInput
    connect?: EmailAuthWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateroleInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FavoriteUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type PlaylistUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutUserInput | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutUserInput | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutUserInput | PlaylistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type EmailAuthUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmailAuthCreateWithoutUserInput, EmailAuthUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmailAuthCreateOrConnectWithoutUserInput
    upsert?: EmailAuthUpsertWithoutUserInput
    disconnect?: EmailAuthWhereInput | boolean
    delete?: EmailAuthWhereInput | boolean
    connect?: EmailAuthWhereUniqueInput
    update?: XOR<XOR<EmailAuthUpdateToOneWithWhereWithoutUserInput, EmailAuthUpdateWithoutUserInput>, EmailAuthUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type PlaylistUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutUserInput | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutUserInput | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutUserInput | PlaylistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type EmailAuthUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmailAuthCreateWithoutUserInput, EmailAuthUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmailAuthCreateOrConnectWithoutUserInput
    upsert?: EmailAuthUpsertWithoutUserInput
    disconnect?: EmailAuthWhereInput | boolean
    delete?: EmailAuthWhereInput | boolean
    connect?: EmailAuthWhereUniqueInput
    update?: XOR<XOR<EmailAuthUpdateToOneWithWhereWithoutUserInput, EmailAuthUpdateWithoutUserInput>, EmailAuthUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteCreateNestedManyWithoutSongInput = {
    create?: XOR<FavoriteCreateWithoutSongInput, FavoriteUncheckedCreateWithoutSongInput> | FavoriteCreateWithoutSongInput[] | FavoriteUncheckedCreateWithoutSongInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutSongInput | FavoriteCreateOrConnectWithoutSongInput[]
    createMany?: FavoriteCreateManySongInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type PlaylistSongsCreateNestedManyWithoutSongInput = {
    create?: XOR<PlaylistSongsCreateWithoutSongInput, PlaylistSongsUncheckedCreateWithoutSongInput> | PlaylistSongsCreateWithoutSongInput[] | PlaylistSongsUncheckedCreateWithoutSongInput[]
    connectOrCreate?: PlaylistSongsCreateOrConnectWithoutSongInput | PlaylistSongsCreateOrConnectWithoutSongInput[]
    createMany?: PlaylistSongsCreateManySongInputEnvelope
    connect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
  }

  export type AlbumSongsCreateNestedManyWithoutSongInput = {
    create?: XOR<AlbumSongsCreateWithoutSongInput, AlbumSongsUncheckedCreateWithoutSongInput> | AlbumSongsCreateWithoutSongInput[] | AlbumSongsUncheckedCreateWithoutSongInput[]
    connectOrCreate?: AlbumSongsCreateOrConnectWithoutSongInput | AlbumSongsCreateOrConnectWithoutSongInput[]
    createMany?: AlbumSongsCreateManySongInputEnvelope
    connect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
  }

  export type FavoriteUncheckedCreateNestedManyWithoutSongInput = {
    create?: XOR<FavoriteCreateWithoutSongInput, FavoriteUncheckedCreateWithoutSongInput> | FavoriteCreateWithoutSongInput[] | FavoriteUncheckedCreateWithoutSongInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutSongInput | FavoriteCreateOrConnectWithoutSongInput[]
    createMany?: FavoriteCreateManySongInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type PlaylistSongsUncheckedCreateNestedManyWithoutSongInput = {
    create?: XOR<PlaylistSongsCreateWithoutSongInput, PlaylistSongsUncheckedCreateWithoutSongInput> | PlaylistSongsCreateWithoutSongInput[] | PlaylistSongsUncheckedCreateWithoutSongInput[]
    connectOrCreate?: PlaylistSongsCreateOrConnectWithoutSongInput | PlaylistSongsCreateOrConnectWithoutSongInput[]
    createMany?: PlaylistSongsCreateManySongInputEnvelope
    connect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
  }

  export type AlbumSongsUncheckedCreateNestedManyWithoutSongInput = {
    create?: XOR<AlbumSongsCreateWithoutSongInput, AlbumSongsUncheckedCreateWithoutSongInput> | AlbumSongsCreateWithoutSongInput[] | AlbumSongsUncheckedCreateWithoutSongInput[]
    connectOrCreate?: AlbumSongsCreateOrConnectWithoutSongInput | AlbumSongsCreateOrConnectWithoutSongInput[]
    createMany?: AlbumSongsCreateManySongInputEnvelope
    connect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FavoriteUpdateManyWithoutSongNestedInput = {
    create?: XOR<FavoriteCreateWithoutSongInput, FavoriteUncheckedCreateWithoutSongInput> | FavoriteCreateWithoutSongInput[] | FavoriteUncheckedCreateWithoutSongInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutSongInput | FavoriteCreateOrConnectWithoutSongInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutSongInput | FavoriteUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: FavoriteCreateManySongInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutSongInput | FavoriteUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutSongInput | FavoriteUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type PlaylistSongsUpdateManyWithoutSongNestedInput = {
    create?: XOR<PlaylistSongsCreateWithoutSongInput, PlaylistSongsUncheckedCreateWithoutSongInput> | PlaylistSongsCreateWithoutSongInput[] | PlaylistSongsUncheckedCreateWithoutSongInput[]
    connectOrCreate?: PlaylistSongsCreateOrConnectWithoutSongInput | PlaylistSongsCreateOrConnectWithoutSongInput[]
    upsert?: PlaylistSongsUpsertWithWhereUniqueWithoutSongInput | PlaylistSongsUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: PlaylistSongsCreateManySongInputEnvelope
    set?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    disconnect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    delete?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    connect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    update?: PlaylistSongsUpdateWithWhereUniqueWithoutSongInput | PlaylistSongsUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: PlaylistSongsUpdateManyWithWhereWithoutSongInput | PlaylistSongsUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: PlaylistSongsScalarWhereInput | PlaylistSongsScalarWhereInput[]
  }

  export type AlbumSongsUpdateManyWithoutSongNestedInput = {
    create?: XOR<AlbumSongsCreateWithoutSongInput, AlbumSongsUncheckedCreateWithoutSongInput> | AlbumSongsCreateWithoutSongInput[] | AlbumSongsUncheckedCreateWithoutSongInput[]
    connectOrCreate?: AlbumSongsCreateOrConnectWithoutSongInput | AlbumSongsCreateOrConnectWithoutSongInput[]
    upsert?: AlbumSongsUpsertWithWhereUniqueWithoutSongInput | AlbumSongsUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: AlbumSongsCreateManySongInputEnvelope
    set?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    disconnect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    delete?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    connect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    update?: AlbumSongsUpdateWithWhereUniqueWithoutSongInput | AlbumSongsUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: AlbumSongsUpdateManyWithWhereWithoutSongInput | AlbumSongsUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: AlbumSongsScalarWhereInput | AlbumSongsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FavoriteUncheckedUpdateManyWithoutSongNestedInput = {
    create?: XOR<FavoriteCreateWithoutSongInput, FavoriteUncheckedCreateWithoutSongInput> | FavoriteCreateWithoutSongInput[] | FavoriteUncheckedCreateWithoutSongInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutSongInput | FavoriteCreateOrConnectWithoutSongInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutSongInput | FavoriteUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: FavoriteCreateManySongInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutSongInput | FavoriteUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutSongInput | FavoriteUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type PlaylistSongsUncheckedUpdateManyWithoutSongNestedInput = {
    create?: XOR<PlaylistSongsCreateWithoutSongInput, PlaylistSongsUncheckedCreateWithoutSongInput> | PlaylistSongsCreateWithoutSongInput[] | PlaylistSongsUncheckedCreateWithoutSongInput[]
    connectOrCreate?: PlaylistSongsCreateOrConnectWithoutSongInput | PlaylistSongsCreateOrConnectWithoutSongInput[]
    upsert?: PlaylistSongsUpsertWithWhereUniqueWithoutSongInput | PlaylistSongsUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: PlaylistSongsCreateManySongInputEnvelope
    set?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    disconnect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    delete?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    connect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    update?: PlaylistSongsUpdateWithWhereUniqueWithoutSongInput | PlaylistSongsUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: PlaylistSongsUpdateManyWithWhereWithoutSongInput | PlaylistSongsUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: PlaylistSongsScalarWhereInput | PlaylistSongsScalarWhereInput[]
  }

  export type AlbumSongsUncheckedUpdateManyWithoutSongNestedInput = {
    create?: XOR<AlbumSongsCreateWithoutSongInput, AlbumSongsUncheckedCreateWithoutSongInput> | AlbumSongsCreateWithoutSongInput[] | AlbumSongsUncheckedCreateWithoutSongInput[]
    connectOrCreate?: AlbumSongsCreateOrConnectWithoutSongInput | AlbumSongsCreateOrConnectWithoutSongInput[]
    upsert?: AlbumSongsUpsertWithWhereUniqueWithoutSongInput | AlbumSongsUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: AlbumSongsCreateManySongInputEnvelope
    set?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    disconnect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    delete?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    connect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    update?: AlbumSongsUpdateWithWhereUniqueWithoutSongInput | AlbumSongsUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: AlbumSongsUpdateManyWithWhereWithoutSongInput | AlbumSongsUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: AlbumSongsScalarWhereInput | AlbumSongsScalarWhereInput[]
  }

  export type AlbumSongsCreateNestedManyWithoutAlbumInput = {
    create?: XOR<AlbumSongsCreateWithoutAlbumInput, AlbumSongsUncheckedCreateWithoutAlbumInput> | AlbumSongsCreateWithoutAlbumInput[] | AlbumSongsUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumSongsCreateOrConnectWithoutAlbumInput | AlbumSongsCreateOrConnectWithoutAlbumInput[]
    createMany?: AlbumSongsCreateManyAlbumInputEnvelope
    connect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
  }

  export type AlbumSongsUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<AlbumSongsCreateWithoutAlbumInput, AlbumSongsUncheckedCreateWithoutAlbumInput> | AlbumSongsCreateWithoutAlbumInput[] | AlbumSongsUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumSongsCreateOrConnectWithoutAlbumInput | AlbumSongsCreateOrConnectWithoutAlbumInput[]
    createMany?: AlbumSongsCreateManyAlbumInputEnvelope
    connect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
  }

  export type AlbumSongsUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<AlbumSongsCreateWithoutAlbumInput, AlbumSongsUncheckedCreateWithoutAlbumInput> | AlbumSongsCreateWithoutAlbumInput[] | AlbumSongsUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumSongsCreateOrConnectWithoutAlbumInput | AlbumSongsCreateOrConnectWithoutAlbumInput[]
    upsert?: AlbumSongsUpsertWithWhereUniqueWithoutAlbumInput | AlbumSongsUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: AlbumSongsCreateManyAlbumInputEnvelope
    set?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    disconnect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    delete?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    connect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    update?: AlbumSongsUpdateWithWhereUniqueWithoutAlbumInput | AlbumSongsUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: AlbumSongsUpdateManyWithWhereWithoutAlbumInput | AlbumSongsUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: AlbumSongsScalarWhereInput | AlbumSongsScalarWhereInput[]
  }

  export type AlbumSongsUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<AlbumSongsCreateWithoutAlbumInput, AlbumSongsUncheckedCreateWithoutAlbumInput> | AlbumSongsCreateWithoutAlbumInput[] | AlbumSongsUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumSongsCreateOrConnectWithoutAlbumInput | AlbumSongsCreateOrConnectWithoutAlbumInput[]
    upsert?: AlbumSongsUpsertWithWhereUniqueWithoutAlbumInput | AlbumSongsUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: AlbumSongsCreateManyAlbumInputEnvelope
    set?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    disconnect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    delete?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    connect?: AlbumSongsWhereUniqueInput | AlbumSongsWhereUniqueInput[]
    update?: AlbumSongsUpdateWithWhereUniqueWithoutAlbumInput | AlbumSongsUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: AlbumSongsUpdateManyWithWhereWithoutAlbumInput | AlbumSongsUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: AlbumSongsScalarWhereInput | AlbumSongsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFovoriteInput = {
    create?: XOR<UserCreateWithoutFovoriteInput, UserUncheckedCreateWithoutFovoriteInput>
    connectOrCreate?: UserCreateOrConnectWithoutFovoriteInput
    connect?: UserWhereUniqueInput
  }

  export type SongCreateNestedOneWithoutFavoriteInput = {
    create?: XOR<SongCreateWithoutFavoriteInput, SongUncheckedCreateWithoutFavoriteInput>
    connectOrCreate?: SongCreateOrConnectWithoutFavoriteInput
    connect?: SongWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFovoriteNestedInput = {
    create?: XOR<UserCreateWithoutFovoriteInput, UserUncheckedCreateWithoutFovoriteInput>
    connectOrCreate?: UserCreateOrConnectWithoutFovoriteInput
    upsert?: UserUpsertWithoutFovoriteInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFovoriteInput, UserUpdateWithoutFovoriteInput>, UserUncheckedUpdateWithoutFovoriteInput>
  }

  export type SongUpdateOneRequiredWithoutFavoriteNestedInput = {
    create?: XOR<SongCreateWithoutFavoriteInput, SongUncheckedCreateWithoutFavoriteInput>
    connectOrCreate?: SongCreateOrConnectWithoutFavoriteInput
    upsert?: SongUpsertWithoutFavoriteInput
    connect?: SongWhereUniqueInput
    update?: XOR<XOR<SongUpdateToOneWithWhereWithoutFavoriteInput, SongUpdateWithoutFavoriteInput>, SongUncheckedUpdateWithoutFavoriteInput>
  }

  export type UserCreateNestedOneWithoutPlaylistInput = {
    create?: XOR<UserCreateWithoutPlaylistInput, UserUncheckedCreateWithoutPlaylistInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistInput
    connect?: UserWhereUniqueInput
  }

  export type PlaylistSongsCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<PlaylistSongsCreateWithoutPlaylistInput, PlaylistSongsUncheckedCreateWithoutPlaylistInput> | PlaylistSongsCreateWithoutPlaylistInput[] | PlaylistSongsUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistSongsCreateOrConnectWithoutPlaylistInput | PlaylistSongsCreateOrConnectWithoutPlaylistInput[]
    createMany?: PlaylistSongsCreateManyPlaylistInputEnvelope
    connect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
  }

  export type PlaylistSongsUncheckedCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<PlaylistSongsCreateWithoutPlaylistInput, PlaylistSongsUncheckedCreateWithoutPlaylistInput> | PlaylistSongsCreateWithoutPlaylistInput[] | PlaylistSongsUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistSongsCreateOrConnectWithoutPlaylistInput | PlaylistSongsCreateOrConnectWithoutPlaylistInput[]
    createMany?: PlaylistSongsCreateManyPlaylistInputEnvelope
    connect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPlaylistNestedInput = {
    create?: XOR<UserCreateWithoutPlaylistInput, UserUncheckedCreateWithoutPlaylistInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistInput
    upsert?: UserUpsertWithoutPlaylistInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlaylistInput, UserUpdateWithoutPlaylistInput>, UserUncheckedUpdateWithoutPlaylistInput>
  }

  export type PlaylistSongsUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<PlaylistSongsCreateWithoutPlaylistInput, PlaylistSongsUncheckedCreateWithoutPlaylistInput> | PlaylistSongsCreateWithoutPlaylistInput[] | PlaylistSongsUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistSongsCreateOrConnectWithoutPlaylistInput | PlaylistSongsCreateOrConnectWithoutPlaylistInput[]
    upsert?: PlaylistSongsUpsertWithWhereUniqueWithoutPlaylistInput | PlaylistSongsUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: PlaylistSongsCreateManyPlaylistInputEnvelope
    set?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    disconnect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    delete?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    connect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    update?: PlaylistSongsUpdateWithWhereUniqueWithoutPlaylistInput | PlaylistSongsUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: PlaylistSongsUpdateManyWithWhereWithoutPlaylistInput | PlaylistSongsUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: PlaylistSongsScalarWhereInput | PlaylistSongsScalarWhereInput[]
  }

  export type PlaylistSongsUncheckedUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<PlaylistSongsCreateWithoutPlaylistInput, PlaylistSongsUncheckedCreateWithoutPlaylistInput> | PlaylistSongsCreateWithoutPlaylistInput[] | PlaylistSongsUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistSongsCreateOrConnectWithoutPlaylistInput | PlaylistSongsCreateOrConnectWithoutPlaylistInput[]
    upsert?: PlaylistSongsUpsertWithWhereUniqueWithoutPlaylistInput | PlaylistSongsUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: PlaylistSongsCreateManyPlaylistInputEnvelope
    set?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    disconnect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    delete?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    connect?: PlaylistSongsWhereUniqueInput | PlaylistSongsWhereUniqueInput[]
    update?: PlaylistSongsUpdateWithWhereUniqueWithoutPlaylistInput | PlaylistSongsUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: PlaylistSongsUpdateManyWithWhereWithoutPlaylistInput | PlaylistSongsUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: PlaylistSongsScalarWhereInput | PlaylistSongsScalarWhereInput[]
  }

  export type AlbumCreateNestedOneWithoutAlbum_songsInput = {
    create?: XOR<AlbumCreateWithoutAlbum_songsInput, AlbumUncheckedCreateWithoutAlbum_songsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutAlbum_songsInput
    connect?: AlbumWhereUniqueInput
  }

  export type SongCreateNestedOneWithoutAlbum_songsInput = {
    create?: XOR<SongCreateWithoutAlbum_songsInput, SongUncheckedCreateWithoutAlbum_songsInput>
    connectOrCreate?: SongCreateOrConnectWithoutAlbum_songsInput
    connect?: SongWhereUniqueInput
  }

  export type AlbumUpdateOneRequiredWithoutAlbum_songsNestedInput = {
    create?: XOR<AlbumCreateWithoutAlbum_songsInput, AlbumUncheckedCreateWithoutAlbum_songsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutAlbum_songsInput
    upsert?: AlbumUpsertWithoutAlbum_songsInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutAlbum_songsInput, AlbumUpdateWithoutAlbum_songsInput>, AlbumUncheckedUpdateWithoutAlbum_songsInput>
  }

  export type SongUpdateOneRequiredWithoutAlbum_songsNestedInput = {
    create?: XOR<SongCreateWithoutAlbum_songsInput, SongUncheckedCreateWithoutAlbum_songsInput>
    connectOrCreate?: SongCreateOrConnectWithoutAlbum_songsInput
    upsert?: SongUpsertWithoutAlbum_songsInput
    connect?: SongWhereUniqueInput
    update?: XOR<XOR<SongUpdateToOneWithWhereWithoutAlbum_songsInput, SongUpdateWithoutAlbum_songsInput>, SongUncheckedUpdateWithoutAlbum_songsInput>
  }

  export type PlaylistCreateNestedOneWithoutPlaylist_songsInput = {
    create?: XOR<PlaylistCreateWithoutPlaylist_songsInput, PlaylistUncheckedCreateWithoutPlaylist_songsInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutPlaylist_songsInput
    connect?: PlaylistWhereUniqueInput
  }

  export type SongCreateNestedOneWithoutPlaylist_songsInput = {
    create?: XOR<SongCreateWithoutPlaylist_songsInput, SongUncheckedCreateWithoutPlaylist_songsInput>
    connectOrCreate?: SongCreateOrConnectWithoutPlaylist_songsInput
    connect?: SongWhereUniqueInput
  }

  export type PlaylistUpdateOneRequiredWithoutPlaylist_songsNestedInput = {
    create?: XOR<PlaylistCreateWithoutPlaylist_songsInput, PlaylistUncheckedCreateWithoutPlaylist_songsInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutPlaylist_songsInput
    upsert?: PlaylistUpsertWithoutPlaylist_songsInput
    connect?: PlaylistWhereUniqueInput
    update?: XOR<XOR<PlaylistUpdateToOneWithWhereWithoutPlaylist_songsInput, PlaylistUpdateWithoutPlaylist_songsInput>, PlaylistUncheckedUpdateWithoutPlaylist_songsInput>
  }

  export type SongUpdateOneRequiredWithoutPlaylist_songsNestedInput = {
    create?: XOR<SongCreateWithoutPlaylist_songsInput, SongUncheckedCreateWithoutPlaylist_songsInput>
    connectOrCreate?: SongCreateOrConnectWithoutPlaylist_songsInput
    upsert?: SongUpsertWithoutPlaylist_songsInput
    connect?: SongWhereUniqueInput
    update?: XOR<XOR<SongUpdateToOneWithWhereWithoutPlaylist_songsInput, SongUpdateWithoutPlaylist_songsInput>, SongUncheckedUpdateWithoutPlaylist_songsInput>
  }

  export type UserCreateNestedOneWithoutEmail_authInput = {
    create?: XOR<UserCreateWithoutEmail_authInput, UserUncheckedCreateWithoutEmail_authInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmail_authInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutEmail_authNestedInput = {
    create?: XOR<UserCreateWithoutEmail_authInput, UserUncheckedCreateWithoutEmail_authInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmail_authInput
    upsert?: UserUpsertWithoutEmail_authInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmail_authInput, UserUpdateWithoutEmail_authInput>, UserUncheckedUpdateWithoutEmail_authInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FavoriteCreateWithoutUserInput = {
    song: SongCreateNestedOneWithoutFavoriteInput
  }

  export type FavoriteUncheckedCreateWithoutUserInput = {
    id?: number
    song_id: number
  }

  export type FavoriteCreateOrConnectWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteCreateManyUserInputEnvelope = {
    data: FavoriteCreateManyUserInput | FavoriteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlaylistCreateWithoutUserInput = {
    title: string
    description: string
    playlist_songs?: PlaylistSongsCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    description: string
    playlist_songs?: PlaylistSongsUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistCreateOrConnectWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput>
  }

  export type PlaylistCreateManyUserInputEnvelope = {
    data: PlaylistCreateManyUserInput | PlaylistCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmailAuthCreateWithoutUserInput = {
    is_auth: boolean
  }

  export type EmailAuthUncheckedCreateWithoutUserInput = {
    id?: number
    is_auth: boolean
  }

  export type EmailAuthCreateOrConnectWithoutUserInput = {
    where: EmailAuthWhereUniqueInput
    create: XOR<EmailAuthCreateWithoutUserInput, EmailAuthUncheckedCreateWithoutUserInput>
  }

  export type FavoriteUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteScalarWhereInput = {
    AND?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    OR?: FavoriteScalarWhereInput[]
    NOT?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    id?: IntFilter<"Favorite"> | number
    user_id?: StringFilter<"Favorite"> | string
    song_id?: IntFilter<"Favorite"> | number
  }

  export type PlaylistUpsertWithWhereUniqueWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    update: XOR<PlaylistUpdateWithoutUserInput, PlaylistUncheckedUpdateWithoutUserInput>
    create: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput>
  }

  export type PlaylistUpdateWithWhereUniqueWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    data: XOR<PlaylistUpdateWithoutUserInput, PlaylistUncheckedUpdateWithoutUserInput>
  }

  export type PlaylistUpdateManyWithWhereWithoutUserInput = {
    where: PlaylistScalarWhereInput
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyWithoutUserInput>
  }

  export type PlaylistScalarWhereInput = {
    AND?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
    OR?: PlaylistScalarWhereInput[]
    NOT?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
    id?: IntFilter<"Playlist"> | number
    title?: StringFilter<"Playlist"> | string
    description?: StringFilter<"Playlist"> | string
    user_id?: StringFilter<"Playlist"> | string
  }

  export type EmailAuthUpsertWithoutUserInput = {
    update: XOR<EmailAuthUpdateWithoutUserInput, EmailAuthUncheckedUpdateWithoutUserInput>
    create: XOR<EmailAuthCreateWithoutUserInput, EmailAuthUncheckedCreateWithoutUserInput>
    where?: EmailAuthWhereInput
  }

  export type EmailAuthUpdateToOneWithWhereWithoutUserInput = {
    where?: EmailAuthWhereInput
    data: XOR<EmailAuthUpdateWithoutUserInput, EmailAuthUncheckedUpdateWithoutUserInput>
  }

  export type EmailAuthUpdateWithoutUserInput = {
    is_auth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailAuthUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    is_auth?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoriteCreateWithoutSongInput = {
    user: UserCreateNestedOneWithoutFovoriteInput
  }

  export type FavoriteUncheckedCreateWithoutSongInput = {
    id?: number
    user_id: string
  }

  export type FavoriteCreateOrConnectWithoutSongInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutSongInput, FavoriteUncheckedCreateWithoutSongInput>
  }

  export type FavoriteCreateManySongInputEnvelope = {
    data: FavoriteCreateManySongInput | FavoriteCreateManySongInput[]
    skipDuplicates?: boolean
  }

  export type PlaylistSongsCreateWithoutSongInput = {
    playlist: PlaylistCreateNestedOneWithoutPlaylist_songsInput
  }

  export type PlaylistSongsUncheckedCreateWithoutSongInput = {
    id?: number
    playlist_id: number
  }

  export type PlaylistSongsCreateOrConnectWithoutSongInput = {
    where: PlaylistSongsWhereUniqueInput
    create: XOR<PlaylistSongsCreateWithoutSongInput, PlaylistSongsUncheckedCreateWithoutSongInput>
  }

  export type PlaylistSongsCreateManySongInputEnvelope = {
    data: PlaylistSongsCreateManySongInput | PlaylistSongsCreateManySongInput[]
    skipDuplicates?: boolean
  }

  export type AlbumSongsCreateWithoutSongInput = {
    album: AlbumCreateNestedOneWithoutAlbum_songsInput
  }

  export type AlbumSongsUncheckedCreateWithoutSongInput = {
    id?: number
    album_id: number
  }

  export type AlbumSongsCreateOrConnectWithoutSongInput = {
    where: AlbumSongsWhereUniqueInput
    create: XOR<AlbumSongsCreateWithoutSongInput, AlbumSongsUncheckedCreateWithoutSongInput>
  }

  export type AlbumSongsCreateManySongInputEnvelope = {
    data: AlbumSongsCreateManySongInput | AlbumSongsCreateManySongInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteUpsertWithWhereUniqueWithoutSongInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutSongInput, FavoriteUncheckedUpdateWithoutSongInput>
    create: XOR<FavoriteCreateWithoutSongInput, FavoriteUncheckedCreateWithoutSongInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutSongInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutSongInput, FavoriteUncheckedUpdateWithoutSongInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutSongInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutSongInput>
  }

  export type PlaylistSongsUpsertWithWhereUniqueWithoutSongInput = {
    where: PlaylistSongsWhereUniqueInput
    update: XOR<PlaylistSongsUpdateWithoutSongInput, PlaylistSongsUncheckedUpdateWithoutSongInput>
    create: XOR<PlaylistSongsCreateWithoutSongInput, PlaylistSongsUncheckedCreateWithoutSongInput>
  }

  export type PlaylistSongsUpdateWithWhereUniqueWithoutSongInput = {
    where: PlaylistSongsWhereUniqueInput
    data: XOR<PlaylistSongsUpdateWithoutSongInput, PlaylistSongsUncheckedUpdateWithoutSongInput>
  }

  export type PlaylistSongsUpdateManyWithWhereWithoutSongInput = {
    where: PlaylistSongsScalarWhereInput
    data: XOR<PlaylistSongsUpdateManyMutationInput, PlaylistSongsUncheckedUpdateManyWithoutSongInput>
  }

  export type PlaylistSongsScalarWhereInput = {
    AND?: PlaylistSongsScalarWhereInput | PlaylistSongsScalarWhereInput[]
    OR?: PlaylistSongsScalarWhereInput[]
    NOT?: PlaylistSongsScalarWhereInput | PlaylistSongsScalarWhereInput[]
    id?: IntFilter<"PlaylistSongs"> | number
    playlist_id?: IntFilter<"PlaylistSongs"> | number
    song_id?: IntFilter<"PlaylistSongs"> | number
  }

  export type AlbumSongsUpsertWithWhereUniqueWithoutSongInput = {
    where: AlbumSongsWhereUniqueInput
    update: XOR<AlbumSongsUpdateWithoutSongInput, AlbumSongsUncheckedUpdateWithoutSongInput>
    create: XOR<AlbumSongsCreateWithoutSongInput, AlbumSongsUncheckedCreateWithoutSongInput>
  }

  export type AlbumSongsUpdateWithWhereUniqueWithoutSongInput = {
    where: AlbumSongsWhereUniqueInput
    data: XOR<AlbumSongsUpdateWithoutSongInput, AlbumSongsUncheckedUpdateWithoutSongInput>
  }

  export type AlbumSongsUpdateManyWithWhereWithoutSongInput = {
    where: AlbumSongsScalarWhereInput
    data: XOR<AlbumSongsUpdateManyMutationInput, AlbumSongsUncheckedUpdateManyWithoutSongInput>
  }

  export type AlbumSongsScalarWhereInput = {
    AND?: AlbumSongsScalarWhereInput | AlbumSongsScalarWhereInput[]
    OR?: AlbumSongsScalarWhereInput[]
    NOT?: AlbumSongsScalarWhereInput | AlbumSongsScalarWhereInput[]
    id?: IntFilter<"AlbumSongs"> | number
    album_id?: IntFilter<"AlbumSongs"> | number
    song_id?: IntFilter<"AlbumSongs"> | number
  }

  export type AlbumSongsCreateWithoutAlbumInput = {
    song: SongCreateNestedOneWithoutAlbum_songsInput
  }

  export type AlbumSongsUncheckedCreateWithoutAlbumInput = {
    id?: number
    song_id: number
  }

  export type AlbumSongsCreateOrConnectWithoutAlbumInput = {
    where: AlbumSongsWhereUniqueInput
    create: XOR<AlbumSongsCreateWithoutAlbumInput, AlbumSongsUncheckedCreateWithoutAlbumInput>
  }

  export type AlbumSongsCreateManyAlbumInputEnvelope = {
    data: AlbumSongsCreateManyAlbumInput | AlbumSongsCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type AlbumSongsUpsertWithWhereUniqueWithoutAlbumInput = {
    where: AlbumSongsWhereUniqueInput
    update: XOR<AlbumSongsUpdateWithoutAlbumInput, AlbumSongsUncheckedUpdateWithoutAlbumInput>
    create: XOR<AlbumSongsCreateWithoutAlbumInput, AlbumSongsUncheckedCreateWithoutAlbumInput>
  }

  export type AlbumSongsUpdateWithWhereUniqueWithoutAlbumInput = {
    where: AlbumSongsWhereUniqueInput
    data: XOR<AlbumSongsUpdateWithoutAlbumInput, AlbumSongsUncheckedUpdateWithoutAlbumInput>
  }

  export type AlbumSongsUpdateManyWithWhereWithoutAlbumInput = {
    where: AlbumSongsScalarWhereInput
    data: XOR<AlbumSongsUpdateManyMutationInput, AlbumSongsUncheckedUpdateManyWithoutAlbumInput>
  }

  export type UserCreateWithoutFovoriteInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
    playlist?: PlaylistCreateNestedManyWithoutUserInput
    email_auth?: EmailAuthCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFovoriteInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
    playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    email_auth?: EmailAuthUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFovoriteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFovoriteInput, UserUncheckedCreateWithoutFovoriteInput>
  }

  export type SongCreateWithoutFavoriteInput = {
    name: string
    description?: string | null
    audio: string
    artist: string
    playlist_songs?: PlaylistSongsCreateNestedManyWithoutSongInput
    album_songs?: AlbumSongsCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutFavoriteInput = {
    id?: number
    name: string
    description?: string | null
    audio: string
    artist: string
    playlist_songs?: PlaylistSongsUncheckedCreateNestedManyWithoutSongInput
    album_songs?: AlbumSongsUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutFavoriteInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutFavoriteInput, SongUncheckedCreateWithoutFavoriteInput>
  }

  export type UserUpsertWithoutFovoriteInput = {
    update: XOR<UserUpdateWithoutFovoriteInput, UserUncheckedUpdateWithoutFovoriteInput>
    create: XOR<UserCreateWithoutFovoriteInput, UserUncheckedCreateWithoutFovoriteInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFovoriteInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFovoriteInput, UserUncheckedUpdateWithoutFovoriteInput>
  }

  export type UserUpdateWithoutFovoriteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
    playlist?: PlaylistUpdateManyWithoutUserNestedInput
    email_auth?: EmailAuthUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFovoriteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
    playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    email_auth?: EmailAuthUncheckedUpdateOneWithoutUserNestedInput
  }

  export type SongUpsertWithoutFavoriteInput = {
    update: XOR<SongUpdateWithoutFavoriteInput, SongUncheckedUpdateWithoutFavoriteInput>
    create: XOR<SongCreateWithoutFavoriteInput, SongUncheckedCreateWithoutFavoriteInput>
    where?: SongWhereInput
  }

  export type SongUpdateToOneWithWhereWithoutFavoriteInput = {
    where?: SongWhereInput
    data: XOR<SongUpdateWithoutFavoriteInput, SongUncheckedUpdateWithoutFavoriteInput>
  }

  export type SongUpdateWithoutFavoriteInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    playlist_songs?: PlaylistSongsUpdateManyWithoutSongNestedInput
    album_songs?: AlbumSongsUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateWithoutFavoriteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    playlist_songs?: PlaylistSongsUncheckedUpdateManyWithoutSongNestedInput
    album_songs?: AlbumSongsUncheckedUpdateManyWithoutSongNestedInput
  }

  export type UserCreateWithoutPlaylistInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
    fovorite?: FavoriteCreateNestedManyWithoutUserInput
    email_auth?: EmailAuthCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPlaylistInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
    fovorite?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    email_auth?: EmailAuthUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPlaylistInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlaylistInput, UserUncheckedCreateWithoutPlaylistInput>
  }

  export type PlaylistSongsCreateWithoutPlaylistInput = {
    song: SongCreateNestedOneWithoutPlaylist_songsInput
  }

  export type PlaylistSongsUncheckedCreateWithoutPlaylistInput = {
    id?: number
    song_id: number
  }

  export type PlaylistSongsCreateOrConnectWithoutPlaylistInput = {
    where: PlaylistSongsWhereUniqueInput
    create: XOR<PlaylistSongsCreateWithoutPlaylistInput, PlaylistSongsUncheckedCreateWithoutPlaylistInput>
  }

  export type PlaylistSongsCreateManyPlaylistInputEnvelope = {
    data: PlaylistSongsCreateManyPlaylistInput | PlaylistSongsCreateManyPlaylistInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPlaylistInput = {
    update: XOR<UserUpdateWithoutPlaylistInput, UserUncheckedUpdateWithoutPlaylistInput>
    create: XOR<UserCreateWithoutPlaylistInput, UserUncheckedCreateWithoutPlaylistInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlaylistInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlaylistInput, UserUncheckedUpdateWithoutPlaylistInput>
  }

  export type UserUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
    fovorite?: FavoriteUpdateManyWithoutUserNestedInput
    email_auth?: EmailAuthUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
    fovorite?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    email_auth?: EmailAuthUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PlaylistSongsUpsertWithWhereUniqueWithoutPlaylistInput = {
    where: PlaylistSongsWhereUniqueInput
    update: XOR<PlaylistSongsUpdateWithoutPlaylistInput, PlaylistSongsUncheckedUpdateWithoutPlaylistInput>
    create: XOR<PlaylistSongsCreateWithoutPlaylistInput, PlaylistSongsUncheckedCreateWithoutPlaylistInput>
  }

  export type PlaylistSongsUpdateWithWhereUniqueWithoutPlaylistInput = {
    where: PlaylistSongsWhereUniqueInput
    data: XOR<PlaylistSongsUpdateWithoutPlaylistInput, PlaylistSongsUncheckedUpdateWithoutPlaylistInput>
  }

  export type PlaylistSongsUpdateManyWithWhereWithoutPlaylistInput = {
    where: PlaylistSongsScalarWhereInput
    data: XOR<PlaylistSongsUpdateManyMutationInput, PlaylistSongsUncheckedUpdateManyWithoutPlaylistInput>
  }

  export type AlbumCreateWithoutAlbum_songsInput = {
    title: string
    description: string
    author: string
  }

  export type AlbumUncheckedCreateWithoutAlbum_songsInput = {
    id?: number
    title: string
    description: string
    author: string
  }

  export type AlbumCreateOrConnectWithoutAlbum_songsInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutAlbum_songsInput, AlbumUncheckedCreateWithoutAlbum_songsInput>
  }

  export type SongCreateWithoutAlbum_songsInput = {
    name: string
    description?: string | null
    audio: string
    artist: string
    favorite?: FavoriteCreateNestedManyWithoutSongInput
    playlist_songs?: PlaylistSongsCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutAlbum_songsInput = {
    id?: number
    name: string
    description?: string | null
    audio: string
    artist: string
    favorite?: FavoriteUncheckedCreateNestedManyWithoutSongInput
    playlist_songs?: PlaylistSongsUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutAlbum_songsInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutAlbum_songsInput, SongUncheckedCreateWithoutAlbum_songsInput>
  }

  export type AlbumUpsertWithoutAlbum_songsInput = {
    update: XOR<AlbumUpdateWithoutAlbum_songsInput, AlbumUncheckedUpdateWithoutAlbum_songsInput>
    create: XOR<AlbumCreateWithoutAlbum_songsInput, AlbumUncheckedCreateWithoutAlbum_songsInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutAlbum_songsInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutAlbum_songsInput, AlbumUncheckedUpdateWithoutAlbum_songsInput>
  }

  export type AlbumUpdateWithoutAlbum_songsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumUncheckedUpdateWithoutAlbum_songsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type SongUpsertWithoutAlbum_songsInput = {
    update: XOR<SongUpdateWithoutAlbum_songsInput, SongUncheckedUpdateWithoutAlbum_songsInput>
    create: XOR<SongCreateWithoutAlbum_songsInput, SongUncheckedCreateWithoutAlbum_songsInput>
    where?: SongWhereInput
  }

  export type SongUpdateToOneWithWhereWithoutAlbum_songsInput = {
    where?: SongWhereInput
    data: XOR<SongUpdateWithoutAlbum_songsInput, SongUncheckedUpdateWithoutAlbum_songsInput>
  }

  export type SongUpdateWithoutAlbum_songsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    favorite?: FavoriteUpdateManyWithoutSongNestedInput
    playlist_songs?: PlaylistSongsUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateWithoutAlbum_songsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    favorite?: FavoriteUncheckedUpdateManyWithoutSongNestedInput
    playlist_songs?: PlaylistSongsUncheckedUpdateManyWithoutSongNestedInput
  }

  export type PlaylistCreateWithoutPlaylist_songsInput = {
    title: string
    description: string
    user: UserCreateNestedOneWithoutPlaylistInput
  }

  export type PlaylistUncheckedCreateWithoutPlaylist_songsInput = {
    id?: number
    title: string
    description: string
    user_id: string
  }

  export type PlaylistCreateOrConnectWithoutPlaylist_songsInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutPlaylist_songsInput, PlaylistUncheckedCreateWithoutPlaylist_songsInput>
  }

  export type SongCreateWithoutPlaylist_songsInput = {
    name: string
    description?: string | null
    audio: string
    artist: string
    favorite?: FavoriteCreateNestedManyWithoutSongInput
    album_songs?: AlbumSongsCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutPlaylist_songsInput = {
    id?: number
    name: string
    description?: string | null
    audio: string
    artist: string
    favorite?: FavoriteUncheckedCreateNestedManyWithoutSongInput
    album_songs?: AlbumSongsUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutPlaylist_songsInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutPlaylist_songsInput, SongUncheckedCreateWithoutPlaylist_songsInput>
  }

  export type PlaylistUpsertWithoutPlaylist_songsInput = {
    update: XOR<PlaylistUpdateWithoutPlaylist_songsInput, PlaylistUncheckedUpdateWithoutPlaylist_songsInput>
    create: XOR<PlaylistCreateWithoutPlaylist_songsInput, PlaylistUncheckedCreateWithoutPlaylist_songsInput>
    where?: PlaylistWhereInput
  }

  export type PlaylistUpdateToOneWithWhereWithoutPlaylist_songsInput = {
    where?: PlaylistWhereInput
    data: XOR<PlaylistUpdateWithoutPlaylist_songsInput, PlaylistUncheckedUpdateWithoutPlaylist_songsInput>
  }

  export type PlaylistUpdateWithoutPlaylist_songsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutPlaylist_songsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type SongUpsertWithoutPlaylist_songsInput = {
    update: XOR<SongUpdateWithoutPlaylist_songsInput, SongUncheckedUpdateWithoutPlaylist_songsInput>
    create: XOR<SongCreateWithoutPlaylist_songsInput, SongUncheckedCreateWithoutPlaylist_songsInput>
    where?: SongWhereInput
  }

  export type SongUpdateToOneWithWhereWithoutPlaylist_songsInput = {
    where?: SongWhereInput
    data: XOR<SongUpdateWithoutPlaylist_songsInput, SongUncheckedUpdateWithoutPlaylist_songsInput>
  }

  export type SongUpdateWithoutPlaylist_songsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    favorite?: FavoriteUpdateManyWithoutSongNestedInput
    album_songs?: AlbumSongsUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateWithoutPlaylist_songsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    audio?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    favorite?: FavoriteUncheckedUpdateManyWithoutSongNestedInput
    album_songs?: AlbumSongsUncheckedUpdateManyWithoutSongNestedInput
  }

  export type UserCreateWithoutEmail_authInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
    fovorite?: FavoriteCreateNestedManyWithoutUserInput
    playlist?: PlaylistCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmail_authInput = {
    id: string
    name: string
    email: string
    password: string
    role?: UserCreateroleInput | string[]
    fovorite?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmail_authInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmail_authInput, UserUncheckedCreateWithoutEmail_authInput>
  }

  export type UserUpsertWithoutEmail_authInput = {
    update: XOR<UserUpdateWithoutEmail_authInput, UserUncheckedUpdateWithoutEmail_authInput>
    create: XOR<UserCreateWithoutEmail_authInput, UserUncheckedCreateWithoutEmail_authInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmail_authInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmail_authInput, UserUncheckedUpdateWithoutEmail_authInput>
  }

  export type UserUpdateWithoutEmail_authInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
    fovorite?: FavoriteUpdateManyWithoutUserNestedInput
    playlist?: PlaylistUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmail_authInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserUpdateroleInput | string[]
    fovorite?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FavoriteCreateManyUserInput = {
    id?: number
    song_id: number
  }

  export type PlaylistCreateManyUserInput = {
    id?: number
    title: string
    description: string
  }

  export type FavoriteUpdateWithoutUserInput = {
    song?: SongUpdateOneRequiredWithoutFavoriteNestedInput
  }

  export type FavoriteUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlaylistUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playlist_songs?: PlaylistSongsUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    playlist_songs?: PlaylistSongsUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteCreateManySongInput = {
    id?: number
    user_id: string
  }

  export type PlaylistSongsCreateManySongInput = {
    id?: number
    playlist_id: number
  }

  export type AlbumSongsCreateManySongInput = {
    id?: number
    album_id: number
  }

  export type FavoriteUpdateWithoutSongInput = {
    user?: UserUpdateOneRequiredWithoutFovoriteNestedInput
  }

  export type FavoriteUncheckedUpdateWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteUncheckedUpdateManyWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type PlaylistSongsUpdateWithoutSongInput = {
    playlist?: PlaylistUpdateOneRequiredWithoutPlaylist_songsNestedInput
  }

  export type PlaylistSongsUncheckedUpdateWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlist_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlaylistSongsUncheckedUpdateManyWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlist_id?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumSongsUpdateWithoutSongInput = {
    album?: AlbumUpdateOneRequiredWithoutAlbum_songsNestedInput
  }

  export type AlbumSongsUncheckedUpdateWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    album_id?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumSongsUncheckedUpdateManyWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    album_id?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumSongsCreateManyAlbumInput = {
    id?: number
    song_id: number
  }

  export type AlbumSongsUpdateWithoutAlbumInput = {
    song?: SongUpdateOneRequiredWithoutAlbum_songsNestedInput
  }

  export type AlbumSongsUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumSongsUncheckedUpdateManyWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlaylistSongsCreateManyPlaylistInput = {
    id?: number
    song_id: number
  }

  export type PlaylistSongsUpdateWithoutPlaylistInput = {
    song?: SongUpdateOneRequiredWithoutPlaylist_songsNestedInput
  }

  export type PlaylistSongsUncheckedUpdateWithoutPlaylistInput = {
    id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlaylistSongsUncheckedUpdateManyWithoutPlaylistInput = {
    id?: IntFieldUpdateOperationsInput | number
    song_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SongDefaultArgs instead
     */
    export type SongArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SongDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlbumDefaultArgs instead
     */
    export type AlbumArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AlbumDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteDefaultArgs instead
     */
    export type FavoriteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FavoriteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaylistDefaultArgs instead
     */
    export type PlaylistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PlaylistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlbumSongsDefaultArgs instead
     */
    export type AlbumSongsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AlbumSongsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaylistSongsDefaultArgs instead
     */
    export type PlaylistSongsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PlaylistSongsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailAuthDefaultArgs instead
     */
    export type EmailAuthArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = EmailAuthDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}